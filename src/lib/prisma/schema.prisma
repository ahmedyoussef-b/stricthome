// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================= //
// MODÈLES D'APPLICATION
// ================================================= //

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ELEVE)
  ambition      String?
  points        Int       @default(0)
  parentPassword String?

  // Relations
  classe      Classroom? @relation("ElevesDeClasse", fields: [classroomId], references: [id])
  classroomId String?

  sessionsEnseignees    CoursSession[] @relation("ProfesseurDeSession")
  classesEnseignees     Classroom[]    @relation("ProfesseurDeClasse")
  sessionsParticipees   CoursSession[] @relation("ParticipantsDeSession")
  messages              Message[]
  reactions             Reaction[]
  etat                  EtatEleve?
  progress              StudentProgress[]
  createdAnnouncements  Announcement[]
  achievements          StudentAchievement[]

  // Relation pour le classement
  leaderboardEntry Leaderboard?

  @@index([classroomId])
}

model Classroom {
  id           String    @id @default(cuid())
  nom          String
  professeur   User      @relation("ProfesseurDeClasse", fields: [professeurId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  professeurId String
  eleves       User[]    @relation("ElevesDeClasse")
  messages     Message[]
  sessions     CoursSession[]
  annonces     Announcement[]

  @@index([professeurId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
  isPunished Boolean @default(false)
}

model Leaderboard {
  id             String @id @default(cuid())
  student        User   @relation(fields: [studentId], references: [id])
  studentId      String @unique
  totalPoints    Int    @default(0)
  dailyPoints    Int    @default(0)
  weeklyPoints   Int    @default(0)
  monthlyPoints  Int    @default(0)
  completedTasks Int    @default(0)
  currentStreak  Int    @default(0)
  bestStreak     Int    @default(0)
  rank           Int
}

model Task {
  id              String            @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  duration        Int? // Duration in minutes for continuous tasks
  startTime       String? // e.g., "18:00"
  endTime         String? // e.g., "19:00"
  isActive        Boolean           @default(true)
  requiresProof   Boolean           @default(false)
  requiresAccuracy Boolean          @default(false)
  studentProgress StudentProgress[]
}

model StudentProgress {
  id              String   @id @default(cuid())
  student         User     @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task     @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(IN_PROGRESS)
  startedAt       DateTime?
  lastActivityAt  DateTime?
  completionDate  DateTime?
  pointsAwarded   Int?
  activeSeconds   Int?     @default(0)
  submissionUrl   String?
  accuracy        Int?
  recipeName      String?
  feedback        ParentFeedback?
  createdAt       DateTime @default(now())

  @@index([studentId])
  @@index([taskId])
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId String          @unique
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}


model CoursSession {
  id                      String   @id @default(cuid())
  professeur              User     @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]   @relation("ParticipantsDeSession")
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId  String?

  // Relation à la classe
  classe     Classroom? @relation(fields: [classroomId], references: [id])
  classroomId  String?

  @@index([professeurId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
  attachmentUrl String?

  @@index([authorId])
  @@index([classeId])
}

// Modèles pour le chat
model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@index([initiatorId])
  @@index([receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  isQuestion     Boolean?
  createdAt      DateTime      @default(now())
  reactions      Reaction[]
  // Un message appartient soit à un chat de classe, soit à une conversation directe
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  classroomId    String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  @@index([senderId])
  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([messageId])
}

// Modèles pour le système de succès
model Achievement {
  id           String               @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json // { "type": "total_tasks", "count": 50 } | { "type": "streak", "days": 7 }
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

// Pour les finales de compétition
model FinalRound {
  id             String                @id @default(cuid())
  name           String
  description    String
  startTime      DateTime
  endTime        DateTime
  participants   FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id            String      @id @default(cuid())
  finalRound    FinalRound  @relation(fields: [finalRoundId], references: [id])
  finalRoundId  String
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  score         Int?
  rank          Int?

  @@unique([finalRoundId, studentId])
}


// ================================================= //
// ENUMS
// ================================================= //
enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  PERSONAL
  ACADEMIC
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
}
