generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                  @id @default(cuid())
  name                     String?
  email                    String?                 @unique
  emailVerified            DateTime?
  image                    String?
  role                     Role                    @default(ELEVE)
  ambition                 String?
  points                   Int?                    @default(0)
  parentPassword           String?
  classroomId              String?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  finalRoundId             String?                 @unique
  announcements            Announcement[]
  classesEnseignees        Classroom[]             @relation("TeacherToClassrooms")
  conversationsAsInitiator Conversation[]          @relation("ConversationInitiator")
  conversationsAsReceiver  Conversation[]          @relation("ConversationReceiver")
  sessionsEnseignees       CoursSession[]          @relation("TeacherToSessions")
  etat                     EtatEleve?
  finalRoundParticipations FinalRoundParticipant[]
  leaderboardEntry         Leaderboard?
  messages                 Message[]               @relation("SenderToMessages")
  reactions                Reaction[]
  studentAchievements      StudentAchievement[]
  progress                 StudentProgress[]
  classe                   Classroom?              @relation(fields: [classroomId], references: [id])
  finalRound               FinalRound?             @relation(fields: [finalRoundId], references: [id])
  sessionsParticipees      CoursSession[]          @relation("ParticipantsToSession")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeurId  String
  announcements Announcement[]
  professeur    User           @relation("TeacherToClassrooms", fields: [professeurId], references: [id])
  sessions      CoursSession[]
  messages      Message[]
  eleves        User[]
}

model CoursSession {
  id                       String     @id @default(cuid())
  professeurId             String
  createdAt                DateTime   @default(now())
  endedAt                  DateTime?
  whiteboardControllerId   String?
  spotlightedParticipantId String?
  classroomId              String?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  professeur               User       @relation("TeacherToSessions", fields: [professeurId], references: [id])
  participants             User[]     @relation("ParticipantsToSession")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metierId   String?
  eleve      User    @relation(fields: [eleveId], references: [id])
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
  student        User     @relation(fields: [studentId], references: [id])
}

model Task {
  id             String            @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  duration       Int?
  startTime      String?
  endTime        String?
  requiresProof  Boolean           @default(false)
  validationType ValidationType    @default(PROFESSOR)
  isActive       Boolean           @default(true)
  attachmentUrl  String?
  progress       StudentProgress[]
}

model StudentProgress {
  id             String          @id @default(cuid())
  studentId      String
  taskId         String
  status         ProgressStatus
  completionDate DateTime?
  pointsAwarded  Int?
  submissionUrl  String?
  accuracy       Int?
  recipeName     String?
  parentFeedback ParentFeedback?
  student        User            @relation(fields: [studentId], references: [id])
  task           Task            @relation(fields: [taskId], references: [id])

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgressId String          @unique
  studentId         String
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  createdAt      DateTime      @default(now())
  classroomId    String?
  conversationId String?
  isQuestion     Boolean?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  sender         User          @relation("SenderToMessages", fields: [senderId], references: [id])
  reactions      Reaction[]
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  createdAt   DateTime  @default(now())
  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id])
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id])
  messages    Message[]

  @@unique([initiatorId, receiverId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  userId    String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  authorId      String
  classeId      String?
  createdAt     DateTime   @default(now())
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  classe        Classroom? @relation(fields: [classeId], references: [id])
}

model Achievement {
  id          String               @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  student       User        @relation(fields: [studentId], references: [id])

  @@unique([studentId, achievementId])
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]
  winner       User?
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRoundId String
  studentId    String
  score        Int        @default(0)
  joinedAt     DateTime   @default(now())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  student      User       @relation(fields: [studentId], references: [id])

  @@unique([finalRoundId, studentId])
}

enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
  PARENT
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}
