// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String            @id @default(cuid())
  name                  String?
  email                 String?           @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role
  points                Int?              @default(0)
  ambition              String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  classeId              String?           @db.Uuid
  classe                Classe?           @relation("Appartient", fields: [classeId], references: [id])
  etat                  EtatEleve?
  sessionsParticipees   CoursSession[]    @relation("Participants")
  classesEnseignees     Classe[]          @relation("Enseigne")
  annonces              Annonce[]
  messages              Message[]
  reactions             Reaction[]
  sessionsEnseignees    CoursSession[]    @relation("ProfesseurSessions")
  studentProgress       StudentProgress[]
  leaderboardEntry      Leaderboard?
  initiatedConversations Conversation[] @relation("Initiator")
  receivedConversations  Conversation[] @relation("Receiver")
}

model Classe {
  id           String         @id @default(uuid()) @db.Uuid
  nom          String
  professeurId String         @db.Uuid
  professeur   User?          @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]         @relation("Appartient")
  annonces     Annonce[]
  messages     Message[]
  sessions     CoursSession[]
}

model EtatEleve {
  id         String  @id @default(uuid()) @db.Uuid
  eleveId    String  @unique @db.Uuid
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String? @db.Uuid
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model Metier {
  id          String      @id @default(uuid()) @db.Uuid
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model CoursSession {
  id                       String      @id @default(cuid())
  professeurId             String      @db.Uuid
  professeur               User        @relation("ProfesseurSessions", fields: [professeurId], references: [id])
  participants             User[]      @relation("Participants")
  createdAt                DateTime    @default(now())
  endedAt                  DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId   String?
  classeId                 String?     @db.Uuid
  classe                   Classe?     @relation(fields: [classeId], references: [id])
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  authorId  String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id])
  classeId  String?  @db.Uuid
  classe    Classe?  @relation(fields: [classeId], references: [id])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String    @db.Uuid
  receiverId  String    @db.Uuid
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String        @db.Uuid
  senderName     String
  sender         User          @relation(fields: [senderId], references: [id])
  classeId       String?       @db.Uuid
  classe         Classe?       @relation(fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  createdAt      DateTime      @default(now())
  reactions      Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.Uuid
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
}

model Task {
  id           String         @id @default(cuid())
  title        String
  description  String
  type         TaskType
  points       Int
  difficulty   TaskDifficulty @default(EASY)
  category     TaskCategory   @default(ACADEMIC)
  duration     Int            @default(1) // en jours
  progress     StudentProgress[]
}

model StudentProgress {
  id             String   @id @default(cuid())
  studentId      String   @db.Uuid
  student        User     @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task     @relation(fields: [taskId], references: [id])
  status         String // 'pending', 'in-progress', 'completed', 'verified', 'rejected'
  completionDate DateTime?
  submittedProof String?
  pointsAwarded  Int
  verifiedBy     String? // ID du professeur
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([studentId, taskId])
}

model Leaderboard {
  id             String @id @default(cuid())
  studentId      String @unique @db.Uuid
  student        User   @relation(fields: [studentId], references: [id])
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  rank           Int
  medal          String? // 'gold', 'silver', 'bronze'
}

model CompetitionSettings {
  id              String   @id @default(cuid())
  academicYear    String   @unique
  startDate       DateTime
  endDate         DateTime
  finalRoundDate  DateTime
  pointsMultipliers Json // { daily: 1, weekly: 1.2, monthly: 1.5, streak: 2 }
}


enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}
