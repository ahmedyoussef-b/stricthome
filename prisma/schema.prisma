// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  role            Role           @default(ELEVE)
  ambition        String?
  points          Int            @default(0)
  parentPassword  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  sessions        Session[]
  accounts        Account[]
  classe          Classroom?     @relation(fields: [classroomId], references: [id])
  classroomId     String?
  sessionsEnseignees CoursSession[] @relation("ProfesseurToSession")
  classesEnseignees  Classroom[]
  sessionsParticipees CoursSession[] @relation(name: "Participants")
  progress        StudentProgress[]
  leaderboardEntry Leaderboard?
  messages        Message[]
  reactions       Reaction[]
  announcements   Announcement[]
  etat            EtatEleve?
  feedbacks       ParentFeedback[]
  achievements    StudentAchievement[]
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String    @id @default(cuid())
  nom         String    @unique
  description String
  icon        String?
  theme       Json      @default("{\"backgroundColor\":\"from-gray-100 to-gray-200\",\"textColor\":\"text-gray-800\",\"primaryColor\":\"100 10% 50%\",\"accentColor\":\"100 20% 70%\",\"cursor\":\"cursor-default\", \"imageUrl\": \"\"}")
  eleves      EtatEleve[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  annonces     Announcement[]
  sessions     CoursSession[]
  messages     Message[]      @relation("ClassroomMessages")
}

model CoursSession {
  id                      String   @id @default(cuid())
  professeur              User     @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]   @relation(name: "Participants")
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId  String?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
  classroomId             String?
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  COLLABORATIVE
  CREATIVE
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model Task {
  id            String          @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  duration      Int? // in minutes, for timer tasks
  isActive      Boolean         @default(true)
  requiresProof Boolean         @default(false)
  attachmentUrl String?
  startTime     String? // e.g., '08:00' for time-based automatic tasks
  endTime       String? // e.g., '09:00'
  progress      StudentProgress[]
  validationType ValidationType @default(PROFESSOR)
}

enum ProgressStatus {
  NOT_STARTED
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

model StudentProgress {
  id              String    @id @default(cuid())
  student         User      @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task      @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  pointsAwarded   Int?
  submissionUrl   String?
  accuracy        Float? // For tasks that have a percentage score
  rejectionReason String?
  recipeName      String? // For cooking task

  feedback        ParentFeedback?
  
  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
    id                  String          @id @default(cuid())
    studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
    studentProgressId   String          @unique
    student             User            @relation(fields: [studentId], references: [id])
    studentId           String
    taste               Int
    presentation        Int
    autonomy            Int
    comment             String?
    createdAt           DateTime        @default(now())
}


model Conversation {
  id            String    @id @default(cuid())
  initiator     User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId   String
  receiver      User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId    String
  messages      Message[] @relation("ConversationMessages")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id])
  senderName     String
  createdAt      DateTime      @default(now())
  reactions      Reaction[]
  isQuestion     Boolean?
  classroomId    String?
  classroom      Classroom?    @relation("ClassroomMessages", fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id           String    @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  earnedAt      DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
    id              String @id @default(cuid())
    date            DateTime
    participants    FinalRoundParticipant[]
    winnerId        String?
}

model FinalRoundParticipant {
    id              String      @id @default(cuid())
    finalRound      FinalRound  @relation(fields: [finalRoundId], references: [id])
    finalRoundId    String
    studentId       String
    score           Int
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
