// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                       String                 @id @default(cuid())
  name                     String?
  email                    String?                @unique
  emailVerified            DateTime?
  image                    String?
  role                     Role                   @default(ELEVE)
  ambition                 String?
  points                   Int                    @default(0)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  classroomId              String?
  classroom                Classroom?             @relation("AppartientA", fields: [classroomId], references: [id])
  classesEnseignees        Classroom[]            @relation("Enseigne")
  etat                     EtatEleve?
  messages                 Message[]
  reactions                Reaction[]
  sessionsEnseignees       CoursSession[]         @relation("ProfesseurDeSession")
  sessionsParticipees      CoursSession[]         @relation("ParticipantDeSession")
  announcements            Announcement[]
  studentProgress          StudentProgress[]
  leaderboardEntry         Leaderboard?
  studentAchievements      StudentAchievement[]
  finalRoundParticipant    FinalRoundParticipant?
  conversationsAsInitiator Conversation[]         @relation("Initiator")
  conversationsAsReceiver  Conversation[]         @relation("Receiver")
}

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeurId  String
  professeur    User           @relation("Enseigne", fields: [professeurId], references: [id])
  eleves        User[]         @relation("AppartientA")
  sessions      CoursSession[]
  announcements Announcement[]
  messages      Message[]

  @@map("classrooms")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?

  @@map("etats_eleves")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  etats       EtatEleve[]

  @@map("metiers")
}

model CoursSession {
  id                        String     @id @default(cuid())
  professeurId              String
  professeur                User       @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  participants              User[]     @relation("ParticipantDeSession")
  createdAt                 DateTime   @default(now())
  endedAt                   DateTime?
  classroomId               String?
  classroom                 Classroom? @relation(fields: [classroomId], references: [id])
  spotlightedParticipantSid String?
  whiteboardControllerId    String?

  @@map("cours_sessions")
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  senderId       String
  senderName     String
  sender         User          @relation(fields: [senderId], references: [id])
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@map("reactions")
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])

  @@map("announcements")
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  PERSONAL
  CREATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

model Task {
  id            String            @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  duration      Int? // Duration in minutes for completion
  isActive      Boolean           @default(true)
  prerequisites Json? // e.g. { "requiredTaskId": "xyz", "minPoints": 100 }
  startTime     String? // e.g. "18:00"
  endTime       String? // e.g. "18:10"
  progress      StudentProgress[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("tasks")
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED // For tasks needing teacher approval
  FAILED
}

model StudentProgress {
  id             String         @id @default(cuid())
  student        User           @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus @default(NOT_STARTED)
  startedAt      DateTime?
  completionDate DateTime?
  lastActivityAt DateTime?
  activeSeconds  Float?
  pointsAwarded  Int?
  streakCount    Int?

  @@unique([studentId, taskId, startedAt])
  @@map("student_progress")
}

model Achievement {
  id          String               @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json // { "type": "streak", "days": 7 } or { "type": "total_tasks", "count": 50 }
  students    StudentAchievement[]
  createdAt   DateTime             @default(now())
  isPublic    Boolean              @default(true)

  @@map("achievements")
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
  @@map("student_achievements")
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int?
  weeklyPoints   Int?
  monthlyPoints  Int?
  completedTasks Int?
  currentStreak  Int?
  bestStreak     Int?
  updatedAt      DateTime @updatedAt

  @@map("leaderboards")
}

// Final round models
model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]

  @@map("final_rounds")
}

model FinalRoundParticipant {
  id          String     @id @default(cuid())
  round       FinalRound @relation(fields: [roundId], references: [id])
  roundId     String
  student     User       @relation(fields: [studentId], references: [id])
  studentId   String     @unique
  score       Int
  rank        Int
  submittedAt DateTime?

  @@map("final_round_participants")
}
