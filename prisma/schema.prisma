// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================================= //
//                 MODÈLES DE L'APPLICATION
// ================================================= //

// --- Modèle Utilisateur ---
model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  parentPassword       String?
  role                 Role                   @default(ELEVE)
  ambition             String?
  points               Int?                   @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classe               Classroom?             @relation(fields: [classroomId], references: [id])
  classroomId          String?
  classesEnseignees    Classroom[]            @relation("ProfesseurToClassroom")
  sessionsEnseignees   CoursSession[]         @relation("ProfesseurToSession") // Ajout de la relation inverse
  sessionsParticipees  CoursSession[]         @relation("SessionParticipants")
  announcements        Announcement[]
  messages             Message[]
  reactions            Reaction[]
  progress             StudentProgress[]
  leaderboardEntry     Leaderboard?
  etat                 EtatEleve?
  sentDirectMessages   Conversation[]         @relation("Initiator")
  receivedDirectMessages Conversation[]       @relation("Receiver")
  studentAchievements  StudentAchievement[]
  finalRoundParticipations FinalRoundParticipant[]
  parentFeedback       ParentFeedback[]
}

// --- Modèle Classe ---
model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ProfesseurToClassroom", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  annonces     Announcement[]
  messages     Message[]
  sessions     CoursSession[]
}

// --- Modèle Session de Cours ---
model CoursSession {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  professeurId             String
  professeur               User     @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  participants             User[]   @relation("SessionParticipants")
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
  spotlightedParticipantId String?
  whiteboardControllerId   String?
}

// --- Modèle État de l'Élève ---
model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

// --- Modèle Métier ---
model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json // { backgroundColor, textColor, primaryColor, accentColor, cursor, imageUrl }
  etatsEleve  EtatEleve[]
}

// --- Modèle Tâche ---
model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType         @default(DAILY)
  category        TaskCategory
  difficulty      TaskDifficulty
  startTime       String? // Format HH:MM pour les tâches journalières
  endTime         String? // Format HH:MM pour les tâches journalières
  duration        Int?             // en minutes, pour les tâches actives
  isActive        Boolean          @default(true)
  requiresProof   Boolean          @default(false)
  validationType  ValidationType   @default(PROFESSOR)
  attachmentUrl   String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  studentProgress StudentProgress[]
}

// --- Modèle Progression de l'Élève ---
model StudentProgress {
  id             String          @id @default(cuid())
  student        User            @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task            @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus
  completionDate DateTime?
  submissionUrl  String?
  rejectionReason String?
  pointsAwarded  Int?
  accuracy       Int? // Pourcentage de réussite
  recipeName     String? // Nom de la recette pour la tâche de cuisine
  parentFeedback ParentFeedback?
}

// --- Modèle Feedback Parental ---
model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId String          @unique
  student           User            @relation(fields: [studentId], references: [id])
  studentId         String
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}


// --- Modèle Annonce ---
model Announcement {
  id          String     @id @default(cuid())
  title       String
  content     String
  attachmentUrl String?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  classe      Classroom? @relation(fields: [classeId], references: [id])
  classeId    String?
  createdAt   DateTime   @default(now())
}

// --- Modèle Conversation (DM) ---
model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]

  @@unique([initiatorId, receiverId])
}

// --- Modèle Message ---
model Message {
  id                   String        @id @default(cuid())
  message              String        @db.Text
  createdAt            DateTime      @default(now())
  sender               User          @relation(fields: [senderId], references: [id])
  senderId             String
  senderName           String
  isQuestion           Boolean?
  classroomId          String?
  classroom            Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId       String?
  conversation         Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
  reactions            Reaction[]
}

// --- Modèle Réaction ---
model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

// --- Modèle Classement (Leaderboard) ---
model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  updatedAt      DateTime @updatedAt
}

// --- Modèle Succès (Achievement) ---
model Achievement {
  id                  String               @id @default(cuid())
  name                String
  description         String
  icon                String
  points              Int
  criteria            Json
  createdAt           DateTime             @default(now())
  studentAchievements StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}


model FinalRound {
    id String @id @default(cuid())
    name String
    description String?
    startTime DateTime
    endTime DateTime
    participants FinalRoundParticipant[]
    createdAt DateTime @default(now())
}

model FinalRoundParticipant {
    id String @id @default(cuid())
    finalRound FinalRound @relation(fields: [finalRoundId], references: [id])
    finalRoundId String
    student User @relation(fields: [studentId], references: [id])
    studentId String
    score Int @default(0)
    joinedAt DateTime @default(now())

    @@unique([finalRoundId, studentId])
}


// ================================================= //
//                     ÉNUMÉRATIONS
// ================================================= //

enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}
