// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// AUTH
// =====================================

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String?           @unique
  emailVerified        DateTime?
  image                String?
  role                 Role              @default(ELEVE)
  ambition             String?
  points               Int               @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  classeId             String?
  classe               Classe?           @relation(fields: [classeId], references: [id], onDelete: SetNull)
  classesEnseignees    Classe[]
  etat                 EtatEleve?
  sessionsParticipees  CoursSession[]    @relation("Participants")
  sessionsEnseignees   CoursSession[]    @relation("Professeur")
  taskCompletions      TaskCompletion[]
  messages             Message[]
  reactions            Reaction[]
  authoredAnnouncements Annonce[]
  conversationsInitiated Conversation[]  @relation("Initiator")
  conversationsReceived  Conversation[]  @relation("Receiver")
}

model EtatEleve {
  id         String   @id @default(cuid())
  eleveId    String   @unique
  eleve      User     @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean  @default(false)
  metierId   String?
  metier     Metier?  @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

enum Role {
  ELEVE
  PROFESSEUR
}

// =====================================
// APPLICATION
// =====================================

model Classe {
  id            String         @id @default(cuid())
  nom           String
  eleves        User[]
  professeurId  String
  professeur    User           @relation(fields: [professeurId], references: [id])
  annonces      Annonce[]
  messages      Message[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model CoursSession {
  id                       String    @id @default(cuid())
  professeurId             String
  professeur               User      @relation("Professeur", fields: [professeurId], references: [id])
  participants             User[]    @relation("Participants")
  createdAt                DateTime  @default(now())
  endedAt                  DateTime? // Ajout√© pour marquer la fin de la session
  spotlightedParticipantSid String?
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  completions     TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      String
  completedAt DateTime @default(now())
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

model Message {
  id             String      @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  sender         User        @relation(fields: [senderId], references: [id])
  createdAt      DateTime    @default(now())
  
  classeId       String?
  classe         Classe?     @relation(fields: [classeId], references: [id], onDelete: Cascade)
  
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  reactions      Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  classe    Classe?  @relation(fields: [classeId], references: [id])
  classeId  String?
  createdAt DateTime @default(now())
}

model Conversation {
  id           String    @id @default(cuid())
  initiatorId  String
  receiverId   String
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}
