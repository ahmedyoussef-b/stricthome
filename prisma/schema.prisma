// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED
  REJECTED
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role                    @default(ELEVE)
  points                  Int                     @default(0)
  ambition                String?
  parentPassword          String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  classe                  Classroom?              @relation("ClassStudents", fields: [classroomId], references: [id])
  classroomId             String?
  classesEnseignees       Classroom[]             @relation("ClassTeacher")
  sessionsParticipees     CoursSession[]
  etat                    EtatEleve?
  sentMessages            Message[]               @relation("SentMessages")
  reactions               Reaction[]
  initiatedConversations  Conversation[]          @relation("Initiator")
  receivedConversations   Conversation[]          @relation("Receiver")
  authoredAnnouncements   Announcement[]
  progress                StudentProgress[]
  achievements            StudentAchievement[]
  leaderboardEntry        Leaderboard?
  parentFeedback          ParentFeedback[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  eleves       User[]         @relation("ClassStudents")
  professeur   User           @relation("ClassTeacher", fields: [professeurId], references: [id])
  professeurId String
  sessions     CoursSession[]
  messages     Message[]
  announcement Announcement[]
}

model CoursSession {
  id                       String   @id @default(cuid())
  professeurId             String
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId   String?
  professeur               User     @relation(fields: [professeurId], references: [id])
  participants             User[]
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Task {
  id              String          @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  requiresProof   Boolean         @default(false)
  isActive        Boolean         @default(true)
  startTime       String? // e.g., "08:00"
  endTime         String? // e.g., "09:00"
  duration        Int? // in minutes
  attachmentUrl   String?
  validationType  ValidationType @default(PROFESSOR)
  progress        StudentProgress[]
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  pointsAwarded   Int?
  submissionUrl   String? // For tasks requiring proof
  accuracy        Int? // From 0 to 100 for professor validation
  rejectionReason String?
  recipeName      String?
  parentFeedback  ParentFeedback?

  @@unique([studentId, taskId])
}

model ParentFeedback {
    id                  String          @id @default(cuid())
    studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
    studentProgressId   String          @unique
    student             User            @relation(fields: [studentId], references: [id])
    studentId           String
    taste               Int
    presentation        Int
    autonomy            Int
    comment             String?
    createdAt           DateTime        @default(now())
}


model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json // { "type": "total_tasks", "count": 50 } or { "type": "streak", "days": 7 }
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

// Model for final round competition
model FinalRound {
  id           String                @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  studentId    String
  score        Int        @default(0)
}

model Conversation {
  id           String    @id @default(cuid())
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId  String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId   String
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  senderName     String
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
  isQuestion     Boolean?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime   @default(now())
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
}
