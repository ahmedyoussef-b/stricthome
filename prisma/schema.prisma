// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role                    @default(ELEVE)
  points                  Int                     @default(0)
  ambition                String?
  parentPassword          String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  classe                  Classroom?              @relation("ClassStudents", fields: [classroomId], references: [id])
  classroomId             String?
  sessionsEnseignees      CoursSession[]          @relation("SessionTeacher")
  sessionsParticipees     CoursSession[]          @relation("Participants")
  annonces                Announcement[]          @relation("Announcements")
  etat                    EtatEleve?
  messages                Message[]
  reactions               Reaction[]
  studentProgress         StudentProgress[]
  leaderboardEntry        Leaderboard?
  achievements            StudentAchievement[]    @relation("StudentAchievements")
  finalRounds             FinalRoundParticipant[] @relation("FinalRoundParticipants")
  conversationsInitiated  Conversation[]          @relation("ConversationInitiator")
  conversationsReceived   Conversation[]          @relation("ConversationReceiver")
  parentFeedback          ParentFeedback[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ClassroomTeacher", fields: [professeurId], references: [id], onDelete: NoAction)
  professeurId String
  eleves       User[]         @relation("ClassStudents")
  sessions     CoursSession[]
  messages     Message[]
  announcements Announcement[] @relation("ClassAnnouncements")
}

model CoursSession {
  id                        String        @id @default(cuid())
  professeur                User          @relation("SessionTeacher", fields: [professeurId], references: [id], onDelete: Cascade)
  professeurId              String
  participants              User[]        @relation("Participants")
  createdAt                 DateTime      @default(now())
  endedAt                   DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId    String?
  classroom                 Classroom?    @relation(fields: [classroomId], references: [id])
  classroomId               String?
}

enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
}

// ------ Nouveaux modèles pour la gamification ------

// Modèle pour les tâches que les élèves peuvent accomplir
model Task {
  id             String         @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType       // DAILY, WEEKLY, MONTHLY
  category       TaskCategory   // ACADEMIC, PERSONAL, COLLABORATIVE, CREATIVE
  difficulty     TaskDifficulty // EASY, MEDIUM, HARD
  isActive       Boolean        @default(true)
  requiresProof  Boolean        @default(false)
  validationType ValidationType @default(PROFESSOR)
  attachmentUrl  String?
  startTime      String?        // e.g., "08:00"
  endTime        String?        // e.g., "09:00"
  duration       Int?           // Duration in minutes for continuous tasks
  progress       StudentProgress[]
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  COLLABORATIVE
  CREATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSEUR
  PARENT
}


// Modèle pour suivre la progression d'un élève sur une tâche
model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  submissionUrl   String?        // Lien vers la preuve (image, document)
  pointsAwarded   Int?
  feedback        String?        // Feedback du validateur
  startedAt       DateTime?
  lastActivityAt  DateTime?      // To track inactivity
  activeSeconds   Int?           // To track continuous activity
  accuracy        Float?         // For tasks requiring a score (e.g. 85%)
  recipeName      String?        // For creative cooking task
  parentFeedback  ParentFeedback?
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED // Validé par un parent/prof
  FAILED
}

// Modèle pour le classement
model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  totalPoints    Int
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  rank           Int
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0) // Nombre de jours consécutifs
  bestStreak     Int      @default(0)
}

// Modèle pour les messages dans le chat
model Message {
  id             String        @id @default(cuid())
  message        String        @db.Text
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  createdAt      DateTime      @default(now())
  reactions      Reaction[]
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  isQuestion     Boolean?      // Null: not analyzed, true: is a question, false: is not
}

// Modèle pour les réactions aux messages
model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}

// Modèle pour les annonces du professeur
model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String     @db.Text
  author        User       @relation("Announcements", fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation("ClassAnnouncements", fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
  attachmentUrl String?
}

// Modèle pour les conversations privées
model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId String
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


// Modèle pour les "métiers" que les élèves peuvent explorer
model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json // { backgroundColor, textColor, primaryColor, accentColor, cursor }
  eleves      EtatEleve[]
}


// Modèle pour l'état d'un élève (puni, métier choisi, etc.)
model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  points      Int
  criteria    Json // { type: "total_tasks", count: 50 }, { type: "streak", days: 7 }
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation("StudentAchievements", fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

// ------ Modèles pour le "Final Round" ------
model FinalRound {
  id          String                  @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean                 @default(false)
  winnerId    String?
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  student      User       @relation("FinalRoundParticipants", fields: [studentId], references: [id])
  studentId    String
  score        Int        @default(0)

  @@unique([finalRoundId, studentId])
}


// Feedback parental pour certaines tâches
model ParentFeedback {
  id                  String          @id @default(cuid())
  studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId   String          @unique
  student             User            @relation(fields: [studentId], references: [id])
  studentId           String
  taste               Int // Note sur 100
  presentation        Int // Note sur 100
  autonomy            Int // Note sur 100
  comment             String?
  createdAt           DateTime        @default(now())
}
