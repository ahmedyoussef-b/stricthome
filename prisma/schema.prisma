// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String                  @id @default(cuid())
  name                     String?
  email                    String?                 @unique
  emailVerified            DateTime?
  image                    String?
  role                     Role                    @default(ELEVE)
  ambition                 String?
  points                   Int                     @default(0)
  parentPassword           String?
  sessionsEnseignees       CoursSession[]          @relation("ProfesseurToSession")
  classesEnseignees        Classroom[]             @relation("ProfesseurToClassroom")
  annonces                 Announcement[]
  messages                 Message[]
  reactions                Reaction[]
  achievements             StudentAchievement[]
  progress                 StudentProgress[]
  etat                     EtatEleve?
  leaderboardEntry         Leaderboard?
  sessionsParticipees      CoursSession[]          @relation("ParticipantsToSession")
  classroomId              String?
  classe                   Classroom?              @relation("EleveToClassroom", fields: [classroomId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  conversationsInitiated   Conversation[]          @relation("InitiatorToConversation")
  conversationsReceived    Conversation[]          @relation("ReceiverToConversation")
  finalRoundParticipations FinalRoundParticipant[]
  parentFeedback           ParentFeedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ProfesseurToClassroom", fields: [professeurId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  professeurId String
  eleves       User[]         @relation("EleveToClassroom")
  sessions     CoursSession[]
  annonces     Announcement[]
  messages     Message[]

  @@index([professeurId])
}

model CoursSession {
  id                        String       @id @default(cuid())
  professeur                User         @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  professeurId              String
  participants              User[]       @relation("ParticipantsToSession")
  createdAt                 DateTime     @default(now())
  endedAt                   DateTime?
  whiteboardControllerId    String?
  spotlightedParticipantSid String?
  classroomId               String?
  classroom                 Classroom?   @relation(fields: [classroomId], references: [id])
  finalRound                FinalRound[]

  @@index([professeurId])
  @@index([classroomId])
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("InitiatorToConversation", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("ReceiverToConversation", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([initiatorId])
  @@index([receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  reactions      Reaction[]
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  isQuestion     Boolean?

  @@index([senderId])
  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([messageId])
  @@index([userId])
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)

  @@index([eleveId])
  @@index([metierId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model Task {
  id              String            @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  duration        Int?
  startTime       String?
  endTime         String?
  requiresProof   Boolean           @default(false)
  validationType  ValidationType    @default(PROFESSOR)
  isActive        Boolean           @default(true)
  attachmentUrl   String?
  studentProgress StudentProgress[]
}

model StudentProgress {
  id             String          @id @default(cuid())
  studentId      String
  student        User            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus  @default(NOT_STARTED)
  completionDate DateTime?
  pointsAwarded  Int?
  submissionUrl  String?
  accuracy       Float?
  recipeName     String?
  parentFeedback ParentFeedback?

  @@unique([studentId, taskId, completionDate])
  @@index([studentId])
  @@index([taskId])
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgressId String          @unique
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  studentId         String
  student           User            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())

  @@index([studentId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  createdAt     DateTime   @default(now())
  attachmentUrl String?

  @@index([authorId])
  @@index([classeId])
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  rank           Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([studentId])
}

model Achievement {
  id          String               @id @default(cuid())
  name        String               @unique
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
  @@index([studentId])
  @@index([achievementId])
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  classroom    CoursSession            @relation(fields: [classroomId], references: [id])
  classroomId  String
  startDate    DateTime
  endDate      DateTime
  participants FinalRoundParticipant[]
  status       String                  @default("UPCOMING")
  winnerId     String?
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  score        Int        @default(0)

  @@unique([finalRoundId, studentId])
}

enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
  PARENT
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED
  PENDING_VALIDATION
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}
