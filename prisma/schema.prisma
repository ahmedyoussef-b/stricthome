// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ELEVE)
  points                Int?                  @default(0)
  ambition              String?
  parentPassword        String?
  classroomId           String?
  classe                Classroom?            @relation("ClasseEleves", fields: [classroomId], references: [id])
  classesEnseignees     Classroom[]           @relation("ProfClasses")
  sessionsParticipees   CoursSession[]        @relation("ParticipantsSession")
  sessionsEnseignees    CoursSession[]        @relation("ProfesseurSession")
  messagesEnvoyes       Message[]             @relation("MessageSender")
  directMessagesSent    Message[]             @relation("DirectMessageSender")
  conversationsInitiated Conversation[]       @relation("Initiator")
  conversationsReceived Conversation[]       @relation("Receiver")
  reactions             Reaction[]
  progress              StudentProgress[]
  leaderboardEntry      Leaderboard?
  announcements         Announcement[]
  achievements          StudentAchievement[]
  finalRoundParticipations FinalRoundParticipant[]
  etat                  EtatEleve?
  feedbacks             ParentFeedback[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ProfClasses", fields: [professeurId], references: [id])
  eleves       User[]         @relation("ClasseEleves")
  sessions     CoursSession[]
  messages     Message[]
  announcements Announcement[]
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Task {
  id            String          @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  isActive      Boolean         @default(true)
  requiresProof Boolean         @default(false)
  validationType ValidationType @default(PROFESSOR)
  startTime     String?
  endTime       String?
  duration      Int?
  attachmentUrl String?
  progress      StudentProgress[]
}

model StudentProgress {
  id              String         @id @default(cuid())
  studentId       String
  student         User           @relation(fields: [studentId], references: [id])
  taskId          String
  task            Task           @relation(fields: [taskId], references: [id])
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  submissionUrl   String?
  feedback        ParentFeedback[]
  pointsAwarded   Int?
  accuracy        Int?
  rejectionReason String?
  recipeName      String?
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgressId String          @unique
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentId         String
  student           User            @relation(fields: [studentId], references: [id])
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}


model CoursSession {
  id                        String   @id @default(cuid())
  professeurId              String
  professeur                User     @relation("ProfesseurSession", fields: [professeurId], references: [id])
  participants              User[]   @relation("ParticipantsSession")
  createdAt                 DateTime @default(now())
  endedAt                   DateTime?
  spotlightedParticipantId  String?
  whiteboardControllerId    String?
  classroomId               String?
  classroom                 Classroom? @relation(fields: [classroomId], references: [id])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
}

model Message {
  id                    String     @id @default(cuid())
  message               String
  createdAt             DateTime   @default(now())
  senderId              String
  sender                User       @relation("MessageSender", fields: [senderId], references: [id])
  senderName            String
  classroomId           String?
  classroom             Classroom? @relation(fields: [classroomId], references: [id])
  reactions             Reaction[]
  isQuestion            Boolean?
  conversationId        String?
  conversation          Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
  directMessageSender   User?      @relation("DirectMessageSender", fields: [directMessageSenderId], references: [id])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  rank           Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  createdAt     DateTime   @default(now())
}

model Achievement {
  id           String               @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id])
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt    DateTime    @default(now())
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRoundId String
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  studentId    String
  student      User       @relation(fields: [studentId], references: [id])
  score        Int
  rank         Int?
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VALIDATED
  REJECTED
  VERIFIED
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}
