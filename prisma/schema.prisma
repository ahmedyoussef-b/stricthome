// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                   @default(ELEVE)
  ambition              String?
  points                Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  classeId              String?
  classe                Classe?                @relation("ElevesEnClasse", fields: [classeId], references: [id], onDelete: SetNull)
  classesEnseignees     Classe[]               @relation("ClassesEnseignees")
  sessionsParticipees   CoursSession[]         @relation("SessionsParticipees")
  sessionsEnseignees    CoursSession[]         @relation("SessionsEnseignees")
  messages              Message[]
  taskCompletions       TaskCompletion[]
  reactions             Reaction[]
  etat                  EtatEleve?
  annonces              Annonce[]
  conversationsInitiated Conversation[]       @relation("Initiator")
  conversationsReceived  Conversation[]       @relation("Receiver")
}

model Classe {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ClassesEnseignees", fields: [professeurId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  eleves       User[]         @relation("ElevesEnClasse")
  messages     Message[]
  annonces     Annonce[]
}

model CoursSession {
  id                      String       @id @default(cuid())
  professeurId            String
  professeur              User         @relation("SessionsEnseignees", fields: [professeurId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  participants            User[]       @relation("SessionsParticipees")
  spotlightedParticipantSid String?
  createdAt               DateTime     @default(now())
  endedAt                 DateTime?
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json      @default("{\"backgroundColor\":\"from-gray-100 to-gray-200\",\"textColor\":\"text-gray-800\",\"primaryColor\":\"240 5.9% 10%\",\"accentColor\":\"240 4.8% 95.9%\",\"cursor\":\"cursor-default\"}")
  EtatEleve   EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

model Message {
  id             String      @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  sender         User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  classeId       String?
  classe         Classe?     @relation(fields: [classeId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions      Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classeId  String?
  classe    Classe?  @relation(fields: [classeId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
}


model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  completions     TaskCompletion[]
}

model TaskCompletion {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedAt  DateTime @default(now())

  @@unique([userId, taskId, completedAt])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
