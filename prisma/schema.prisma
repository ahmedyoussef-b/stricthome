// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role             @default(ELEVE)
  ambition            String?
  points              Int              @default(0)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  classeId            String?
  classe              Classe?          @relation(fields: [classeId], references: [id])
  etat                EtatEleve?
  classesEnseignees   Classe[]         @relation("ProfesseurToClasse")
  sessionsParticipees CoursSession[]   @relation("SessionParticipants")
  reactions           Reaction[]
  messagesEnvoyes     Message[]
  taskCompletions     TaskCompletion[]
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model Classe {
  id           String       @id @default(cuid())
  nom          String
  professeurId String
  professeur   User         @relation("ProfesseurToClasse", fields: [professeurId], references: [id], onDelete: Cascade)
  eleves       User[]
  chatroom     Chatroom     @relation(fields: [chatroomId], references: [id])
  chatroomId   String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Chatroom {
  id       String    @id @default(cuid())
  messages Message[] @relation("ChatroomMessages")
  classe   Classe?
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[] @relation("ConversationMessages")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderName     String
  chatroomId     String?
  chatroom       Chatroom?     @relation("ChatroomMessages", fields: [chatroomId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  reactions      Reaction[]

  @@index([chatroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

model CoursSession {
  id           String   @id @default(cuid())
  professeur   User     @relation(fields: [professeurId], references: [id])
  professeurId String
  participants User[]   @relation("SessionParticipants")
  createdAt    DateTime @default(now())
  endedAt      DateTime?
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String
  points      Int
  type        TaskType
  completions TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([userId, taskId])
}
