// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ELEVE)
  ambition      String?
  points        Int       @default(0)

  // Relations
  classeId             String?
  classe               Classe?           @relation("AppartientA", fields: [classeId], references: [id])
  classesEnseignees    Classe[]          @relation("Enseigne")
  messages             Message[]
  reactions            Reaction[]
  sessionsEnseignees   CoursSession[]    @relation("ProfesseurDeSession")
  sessionsParticipees  CoursSession[]    @relation("ParticipantDeSession")
  annonces             Annonce[]
  etat                 EtatEleve?
  progress             StudentProgress[]
  leaderboardEntry     Leaderboard?
  achievements         StudentAchievement[]
  finalRoundEntries    FinalRoundParticipant[]
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")

  @@index([classeId])
}

model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeurId String
  professeur   User      @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]    @relation("AppartientA")
  messages     Message[]
  annonces     Annonce[]
  sessions     CoursSession[]

  @@index([professeurId])
}

model Metier {
  id          String   @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json     @default("{}")
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@index([metierId])
}

// MESSAGERIE
model Message {
  id             String      @id @default(cuid())
  message        String
  createdAt      DateTime    @default(now())
  senderId       String
  senderName     String
  sender         User        @relation(fields: [senderId], references: [id])
  classeId       String?
  classe         Classe?     @relation(fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]

  @@index([senderId])
  @@index([classeId])
  @@index([conversationId])
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([userId])
}

model Conversation {
  id           String    @id @default(cuid())
  initiatorId  String
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId   String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
}

model Annonce {
  id            String   @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime @default(now())
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classe?  @relation(fields: [classeId], references: [id])

  @@index([authorId])
  @@index([classeId])
}


// SESSIONS DE COURS
model CoursSession {
  id                       String     @id @default(cuid())
  professeurId             String
  professeur               User       @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  classeId                 String?
  classe                   Classe?    @relation(fields: [classeId], references: [id])
  participants             User[]     @relation("ParticipantDeSession")
  createdAt                DateTime   @default(now())
  endedAt                  DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId   String?

  @@index([professeurId])
  @@index([classeId])
}

// SYSTEME DE JEU
model Task {
  id            String          @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType        @default(DAILY)
  category      TaskCategory
  duration      Int? // in minutes
  difficulty    TaskDifficulty
  isActive      Boolean         @default(true)
  prerequisites Json? // e.g., { "requiredTaskId": "cl..." }
  startTime     String? // "HH:mm"
  endTime       String? // "HH:mm"
  progress      StudentProgress[]
}

model StudentProgress {
  id             String    @id @default(cuid())
  studentId      String
  student        User      @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task      @relation(fields: [taskId], references: [id])
  status         TaskStatus @default(NOT_STARTED)
  completionDate DateTime?
  pointsAwarded  Int?
  startedAt      DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?      @default(0)

  @@unique([studentId, taskId])
  @@index([studentId])
  @@index([taskId])
}

model Leaderboard {
  id             String  @id @default(cuid())
  studentId      String  @unique
  student        User    @relation(fields: [studentId], references: [id])
  rank           Int
  totalPoints    Int     @default(0)
  dailyPoints    Int     @default(0)
  weeklyPoints   Int     @default(0)
  monthlyPoints  Int     @default(0)
  completedTasks Int     @default(0)
  currentStreak  Int     @default(0)
  bestStreak     Int     @default(0)
}

model Achievement {
  id           String               @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id])
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
  @@index([studentId])
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  studentId    String
  student      User       @relation(fields: [studentId], references: [id])
  finalRoundId String
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  score        Int        @default(0)

  @@unique([studentId, finalRoundId])
  @@index([studentId])
}


enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  CREATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED
  FAILED
}
