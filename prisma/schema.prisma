// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  emailVerified       DateTime?
  image               String?
  role                Role
  ambition            String?
  points              Int              @default(0)
  classeId            String?
  classe              Classe?          @relation("StudentClasses", fields: [classeId], references: [id])
  classesEnseignees   Classe[]         @relation("ProfClasses")
  messagesEnvoyes     Message[]
  reactions           Reaction[]
  sessionsParticipees CoursSession[]   @relation("CoursSessionParticipants")
  sessionsEnseignees  CoursSession[]   @relation("CoursSessionProfesseur")
  etat                EtatEleve?
  taskCompletions     TaskCompletion[]

  @@index([classeId])
}

model Classe {
  id           String  @id @default(cuid())
  nom          String
  professeurId String
  professeur   User    @relation("ProfClasses", fields: [professeurId], references: [id])
  eleves       User[]  @relation("StudentClasses")
  chatroomId   String  @unique
  chatroom     Chatroom @relation(fields: [chatroomId], references: [id])

  @@index([professeurId])
}

model Chatroom {
  id       String    @id @default(cuid())
  messages Message[]
  classe   Classe?
}

model Message {
  id          String     @id @default(cuid())
  message     String
  createdAt   DateTime   @default(now())
  senderId    String
  senderName  String
  sender      User       @relation(fields: [senderId], references: [id])
  chatroomId  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  reactions   Reaction[]

  @@index([chatroomId])
  @@index([senderId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId, emoji])
  @@index([messageId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@index([metierId])
}

model CoursSession {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  endedAt      DateTime?
  professeurId String
  professeur   User     @relation("CoursSessionProfesseur", fields: [professeurId], references: [id])
  participants User[]   @relation("CoursSessionParticipants")

  @@index([professeurId])
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  completions   TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id])
  completedAt DateTime @default(now())

  @@unique([userId, taskId, completedAt])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
