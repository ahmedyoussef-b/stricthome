// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  email                   String?         @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role            @default(ELEVE)
  ambition                String?
  points                  Int             @default(0)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  classeId                String?         @db.Uuid
  classe                  Classe?         @relation("Appartient", fields: [classeId], references: [id])
  etat                    EtatEleve?
  sessionsEnseignees      CoursSession[]  @relation("Enseignant")
  sessionsParticipees     CoursSession[]  @relation("Participants")
  messages                Message[]
  reactions               Reaction[]
  conversationsInitiated  Conversation[]  @relation("Initiator")
  conversationsReceived   Conversation[]  @relation("Receiver")
  annonces                Annonce[]
  progress                StudentProgress[]
  leaderboardEntry        Leaderboard?
  accounts                Account[]
  sessions                Session[]
}

model Annonce {
  id          String    @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  classeId    String?   @db.Uuid
  classe      Classe?   @relation(fields: [classeId], references: [id])

  @@map("annonces")
}

model Classe {
  id                      String          @id @default(cuid()) @db.Uuid
  nom                     String
  professeurId            String          @db.Uuid
  professeur              User            @relation("Enseigne", fields: [professeurId], references: [id])
  eleves                  User[]          @relation("Appartient")
  messages                Message[]
  sessions                CoursSession[]
  annonces                Annonce[]

  @@map("classes")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]

  @@map("metiers")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@map("etats_eleves")
}

model CoursSession {
  id                        String   @id @default(cuid())
  professeurId              String   @db.Uuid
  professeur                User     @relation("Enseignant", fields: [professeurId], references: [id])
  participants              User[]   @relation("Participants")
  createdAt                 DateTime @default(now())
  endedAt                   DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId    String?
  classeId                  String?   @db.Uuid
  classe                    Classe?  @relation(fields: [classeId], references: [id])

  @@map("cours_sessions")
}

model Message {
  id              String         @id @default(cuid())
  message         String
  createdAt       DateTime       @default(now())
  senderId        String
  senderName      String
  sender          User           @relation(fields: [senderId], references: [id])
  classeId        String?        @db.Uuid
  classe          Classe?        @relation(fields: [classeId], references: [id])
  conversationId  String?
  conversation    Conversation?  @relation(fields: [conversationId], references: [id])
  reactions       Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reactions")
}

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  initiatorId  String
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId   String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  messages     Message[]

  @@map("conversations")
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String
  points      Int
  type        TaskType
  difficulty  TaskDifficulty
  category    TaskCategory
  duration    Int // en jours
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  progress    StudentProgress[]

  @@map("tasks")
}

model StudentProgress {
  id             String    @id @default(cuid())
  studentId      String
  student        User      @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task      @relation(fields: [taskId], references: [id])
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  pointsAwarded  Int?

  @@unique([studentId, taskId])
  @@map("student_progress")
}

model Leaderboard {
  id             String @id @default(cuid())
  studentId      String @unique
  student        User   @relation(fields: [studentId], references: [id])
  totalPoints    Int
  rank           Int
  completedTasks Int
  updatedAt      DateTime @updatedAt

  @@map("leaderboards")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  CREATIVE
  PERSONAL
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED
}
