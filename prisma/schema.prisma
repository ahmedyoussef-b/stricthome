// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ELEVE)
  ambition              String?
  points                Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  sessionsParticipees   CoursSession[]        @relation("ParticipantDeSession")
  sessionsEnseignees    CoursSession[]        @relation("ProfesseurDeSession")
  classesEnseignees     Classroom[]           @relation("Enseigne")
  classroomId           String?
  classroom             Classroom?            @relation("AppartientA", fields: [classroomId], references: [id])
  etat                  EtatEleve?
  messages              Message[]
  reactions             Reaction[]
  announcements         Announcement[]
  tasks                 StudentProgress[]
  leaderboardEntry      Leaderboard?
  achievements          StudentAchievement[]

  @@map("users")
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]         @relation("AppartientA")
  messages     Message[]
  announcements Announcement[]
  sessions     CoursSession[]

  @@map("classrooms")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@map("student_states")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]

  @@map("careers")
}

// MESSAGERIE
model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  initiator   User      @relation(fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation(fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  message        String
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  senderName     String
  classroomId    String?
  classroom      Classroom?   @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  reactions      Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("reactions")
}

// SESSION DE COURS
model CoursSession {
  id                       String   @id @default(cuid())
  professeurId             String
  professeur               User     @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  classroomId              String?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  participants             User[]   @relation("ParticipantDeSession")
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId   String?

  @@map("course_sessions")
}

// ANNONCES
model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String
  author        User      @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])

  @@map("announcements")
}

// GAMIFICATION & TÂCHES
model Task {
  id            String    @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  duration      Int? // en minutes, pour les tâches basées sur le temps
  startTime     String? // "HH:mm"
  endTime       String? // "HH:mm"
  prerequisites Json? // ex: ["task_id_1", "task_id_2"]
  isActive      Boolean   @default(true)
  
  studentProgress StudentProgress[]
  
  @@map("tasks")
}

model StudentProgress {
  id             String        @id @default(cuid())
  studentId      String
  student        User          @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task          @relation(fields: [taskId], references: [id])
  status         ProgressStatus @default(IN_PROGRESS)
  completionDate DateTime?
  startedAt      DateTime?      // Quand la tâche de type "temps" a été commencée
  lastActivityAt DateTime?      // Pour suivre l'inactivité
  activeSeconds  Int?           // Cumul du temps actif
  pointsAwarded  Int?

  @@map("student_progress")
}

model Leaderboard {
  id             String    @id @default(cuid())
  studentId      String    @unique
  student        User      @relation(fields: [studentId], references: [id])
  rank           Int
  totalPoints    Int       @default(0)
  dailyPoints    Int       @default(0)
  weeklyPoints   Int       @default(0)
  monthlyPoints  Int       @default(0)
  completedTasks Int       @default(0)
  currentStreak  Int       @default(0)
  bestStreak     Int       @default(0)
  updatedAt      DateTime  @updatedAt

  @@map("leaderboards")
}

model Achievement {
  id           String   @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json // { type: "streak", days: 7 } or { type: "total_tasks", count: 50 }
  
  students     StudentAchievement[]

  @@map("achievements")
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id])
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt    DateTime    @default(now())

  @@map("student_achievements")
}

// FINAL ROUND
model FinalRound {
  id           String                @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean               @default(false)
  participants FinalRoundParticipant[]

  @@map("final_rounds")
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  roundId      String
  round        FinalRound @relation(fields: [roundId], references: [id])
  studentId    String
  student      User       @relation(fields: [studentId], references: [id])
  score        Int        @default(0)
  joinedAt     DateTime   @default(now())

  @@map("final_round_participants")
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED // For tasks needing teacher approval
  FAILED
}
