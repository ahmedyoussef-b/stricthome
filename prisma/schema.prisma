// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ELEVE)
  points                Int                   @default(0)
  ambition              String?
  parentPassword        String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  classe                Classroom?            @relation(fields: [classroomId], references: [id])
  classroomId           String?
  sessionsParticipees   CoursSession[]        @relation("Participants")
  classesEnseignees     Classroom[]
  messages              Message[]
  reactions             Reaction[]
  etat                  EtatEleve?
  sentAnnouncements     Announcement[]
  achievements          StudentAchievement[]
  leaderboardEntry      Leaderboard?
  progress              StudentProgress[]
  finalRoundsParticipated FinalRoundParticipant[]
  parentFeedback        ParentFeedback[]
  conversationsInitiated Conversation[]       @relation("Initiator")
  conversationsReceived  Conversation[]       @relation("Receiver")
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  sessions     CoursSession[]
  annonces     Announcement[]
  messages     Message[]
}

model Metier {
  id          String    @id @default(cuid())
  nom         String    @unique
  description String
  icon        String?
  theme       Json      // { backgroundColor, textColor, primaryColor, accentColor, cursor, imageUrl }
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model CoursSession {
  id                      String   @id @default(cuid())
  professeur              User     @relation(fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]   @relation("Participants")
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  classroomId             String?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
  spotlightedParticipantSid String?
  whiteboardControllerId  String?
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  sender         User          @relation(fields: [senderId], references: [id])
  createdAt      DateTime      @default(now())
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
  isQuestion     Boolean?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  pointsAwarded   Int?
  submissionUrl   String?
  rejectionReason String?
  accuracy        Int?
  recipeName      String?
  parentFeedback  ParentFeedback?
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId String          @unique
  student           User            @relation(fields: [studentId], references: [id])
  studentId         String
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}


model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  duration        Int?
  startTime       String?
  endTime         String?
  isActive        Boolean          @default(true)
  requiresProof   Boolean          @default(false)
  validationType  String
  attachmentUrl   String?
  progress        StudentProgress[]
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id           String               @id @default(cduid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json // { type: 'streak' | 'total_tasks', value: number }
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id            String                  @id @default(cuid())
  name          String
  startTime     DateTime
  endTime       DateTime
  isActive      Boolean                 @default(false)
  participants  FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  round        FinalRound @relation(fields: [roundId], references: [id])
  roundId      String
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  score        Int        @default(0)
  joinedAt     DateTime   @default(now())

  @@unique([roundId, studentId])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED
  REJECTED
}
