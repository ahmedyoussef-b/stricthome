// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

// ================================================= //
//                      MODELS                       //
// ================================================= //

// --- MODÈLES UTILISATEUR ET CLASSE ---
model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  parentPassword       String?
  role                 Role                   @default(ELEVE)
  points               Int?                   @default(0)
  ambition             String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classe               Classroom?             @relation("EleveToClasse", fields: [classroomId], references: [id])
  classroomId          String?
  etat                 EtatEleve?
  sessionsEnseignees   CoursSession[]         @relation("ProfesseurToSession")
  sessionsParticipees  CoursSession[]         @relation("SessionParticipants")
  reactions            Reaction[]
  messages             Message[]
  studentProgress      StudentProgress[]
  achievements         StudentAchievement[]
  leaderboardEntry     Leaderboard?
  announcements        Announcement[]
  sentDirectMessages   Conversation[]         @relation("Initiator")
  receivedDirectMessages Conversation[]       @relation("Receiver")
  parentFeedback       ParentFeedback[]
}

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeur    User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId  String
  eleves        User[]         @relation("EleveToClasse")
  sessions      CoursSession[]
  announcements Announcement[]
  messages      Message[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json // { backgroundColor, textColor, primaryColor, accentColor, cursor, imageUrl }
  etatsEleves EtatEleve[]
}


// --- MODÈLES DE SESSION DE COURS ---
model CoursSession {
  id                       String   @id @default(cuid())
  professeur               User     @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]   @relation("SessionParticipants")
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
  spotlightedParticipantId String?
  whiteboardControllerId   String?
}


// --- MODÈLES DE CHAT ET COMMUNICATION ---
model Conversation {
  id           String    @id @default(cuid())
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId  String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId   String
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id                    String        @id @default(cuid())
  message               String
  sender                User          @relation(fields: [senderId], references: [id])
  senderId              String
  senderName            String
  createdAt             DateTime      @default(now())
  classroomId           String?
  classroom             Classroom?    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  conversationId        String?
  conversation          Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions             Reaction[]
  isQuestion            Boolean?
  directMessageSenderId String?
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime   @default(now())
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
}


// --- MODÈLES DE GAMIFICATION (TÂCHES, PROGRÈS, CLASSEMENT) ---
model Task {
  id              String            @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType          @default(DAILY)
  category        TaskCategory      @default(ACADEMIC)
  difficulty      TaskDifficulty    @default(MEDIUM)
  startTime       String? // e.g., "08:00"
  endTime         String? // e.g., "09:00"
  duration        Int? // in minutes
  isActive        Boolean           @default(true)
  requiresProof   Boolean           @default(false)
  attachmentUrl   String?
  validationType  ValidationType    @default(PROFESSOR)
  studentProgress StudentProgress[]
}

model StudentProgress {
  id              String          @id @default(cuid())
  student         User            @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task            @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus  @default(NOT_STARTED)
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  feedback        String?
  accuracy        Int? // New field for storing accuracy percentage
  recipeName      String? // For cooking task
  parentFeedback  ParentFeedback?
}

model ParentFeedback {
  id                 String          @id @default(cuid())
  studentProgress    StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId  String          @unique
  studentId          String
  student            User            @relation(fields: [studentId], references: [id])
  taste              Int
  presentation       Int
  autonomy           Int
  comment            String?
  createdAt          DateTime        @default(now())
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id               String               @id @default(cuid())
  name             String
  description      String
  icon             String
  points           Int
  criteria         Json
  studentAchievers StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())
}

// Final Round Models for the end of the year competition
model FinalRound {
  id           String                  @id @default(cuid())
  year         Int                     @unique
  name         String
  startDate    DateTime
  endDate      DateTime
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  studentId    String
  score        Int
  rank         Int
}

// --- ÉNUMÉRATIONS ---
enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}
