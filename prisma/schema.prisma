// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================
//          MODÈLES DE BASE
// ==================================

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  role                   Role                    @default(ELEVE)
  ambition               String?
  points                 Int?                    @default(0)
  parentPassword         String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  classe                 Classroom?              @relation("EleveToClasse", fields: [classroomId], references: [id])
  classroomId            String?
  sessionsParticipees    CoursSession[]          @relation("SessionParticipants")
  messages               Message[]
  annonces               Announcement[]
  reactions              Reaction[]
  progress               StudentProgress[]
  achievements           StudentAchievement[]
  leaderboardEntry       Leaderboard?
  etat                   EtatEleve?
  classesEnseignees      Classroom[]             @relation("ProfesseurToClasse")
  sessionsEnseignees     CoursSession[]          @relation("ProfesseurToSession")
  sentDirectMessages     Conversation[]          @relation("Initiator")
  receivedDirectMessages Conversation[]          @relation("Receiver")
  parentFeedbacks        ParentFeedback[]
  FinalRoundParticipant  FinalRoundParticipant[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User?          @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId String?
  eleves       User[]         @relation("EleveToClasse")
  sessions     CoursSession[]
  messages     Message[]
  annonces     Announcement[]
  finalRounds  FinalRound[]
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

// ==================================
//         MODÈLES DE SESSION
// ==================================

model CoursSession {
  id                       String     @id @default(cuid())
  professeur               User       @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]     @relation("SessionParticipants")
  createdAt                DateTime   @default(now())
  endedAt                  DateTime?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
  spotlightedParticipantId String?
  whiteboardControllerId   String?
}

// ==================================
//      MODÈLES DE MESSAGERIE
// ==================================

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  isQuestion     Boolean?
  reactions      Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime   @default(now())
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
}

// ==================================
//         MODÈLES DE TÂCHES
// ==================================

model Task {
  id              String            @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  requiresProof   Boolean           @default(false)
  validationType  ValidationType    @default(PROFESSOR)
  startTime       String? // e.g., "08:00"
  endTime         String? // e.g., "09:00"
  attachmentUrl   String?
  duration        Int? // in minutes
  isActive        Boolean           @default(true)
  studentProgress StudentProgress[]
}

model StudentProgress {
  id              String          @id @default(cuid())
  student         User            @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task            @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus
  completionDate  DateTime?
  submissionUrl   String?
  rejectionReason String?
  pointsAwarded   Int?
  accuracy        Int?
  recipeName      String?
  parentFeedback  ParentFeedback?

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId String          @unique
  student           User            @relation(fields: [studentId], references: [id])
  studentId         String
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}

// ==================================
//        MODÈLES DE JEU
// ==================================

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  rank           Int      @default(0)
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id          String               @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json // e.g. { "type": "streak", "days": 7 }
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id           String                  @id @default(cuid())
  classroom    Classroom               @relation(fields: [classroomId], references: [id])
  classroomId  String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  score        Int        @default(0)
}

// ==================================
//              ENUMS
// ==================================

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}
