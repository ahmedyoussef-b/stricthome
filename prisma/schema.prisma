// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(ELEVE)
  ambition       String?
  points         Int       @default(0)
  parentPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // un professeur peut enseigner dans plusieurs classes
  classesEnseignees Classroom[] @relation("ProfesseurDeClasse")
  // un élève est dans une seule classe
  classe            Classroom?  @relation("ElevesDeClasse", fields: [classroomId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  classroomId       String?

  // Relations pour les conversations
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")

  // Un professeur peut enseigner plusieurs sessions
  sessionsEnseignees  CoursSession[] @relation("ProfesseurDeSession")
  // Un utilisateur peut participer à plusieurs sessions
  sessionsParticipees CoursSession[] @relation("ParticipantsDeSession")

  // Relations pour les messages et réactions
  messages  Message[]
  reactions Reaction[]

  // Relations pour le suivi de la progression
  progress StudentProgress[]

  // Relations pour les annonces
  announcements Announcement[]

  // Relations pour les succès
  achievements StudentAchievement[]

  // Relation pour l'état de l'élève (puni, métier, etc.)
  etat EtatEleve?

  // Relation pour le classement
  leaderboardEntry Leaderboard?

  finalRoundParticipations FinalRoundParticipant[]

  parentFeedback ParentFeedback[]

  @@map("users")
}

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeur    User           @relation("ProfesseurDeClasse", fields: [professeurId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  professeurId  String
  eleves        User[]         @relation("ElevesDeClasse")
  messages      Message[]
  announcements Announcement[]
  sessions      CoursSession[]

  @@map("classrooms")
}

enum Role {
  ELEVE
  PROFESSEUR
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?

  @@map("etats_eleves")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]

  @@map("metiers")
}

// Table de liaison pour le classement
model Leaderboard {
  id             String @id @default(cuid())
  student        User   @relation(fields: [studentId], references: [id])
  studentId      String @unique
  totalPoints    Int    @default(0)
  dailyPoints    Int    @default(0)
  weeklyPoints   Int    @default(0)
  monthlyPoints  Int    @default(0)
  completedTasks Int    @default(0)
  currentStreak  Int    @default(0)
  bestStreak     Int    @default(0)
  rank           Int

  @@map("leaderboards")
}

// Modèle pour les tâches
model Task {
  id               String            @id @default(cuid())
  title            String
  description      String
  points           Int
  type             TaskType          @default(DAILY)
  category         TaskCategory      @default(ACADEMIC)
  difficulty       TaskDifficulty    @default(EASY)
  isActive         Boolean           @default(true)
  requiresProof    Boolean           @default(false)
  requiresAccuracy Boolean           @default(false)
  startTime        String? // Format HH:mm for time-based tasks
  endTime          String? // Format HH:mm
  duration         Int? // Duration in minutes for continuous tasks
  progress         StudentProgress[]

  @@map("tasks")
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

// Modèle pour la progression des élèves sur les tâches
model StudentProgress {
  id             String         @id @default(cuid())
  student        User           @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  pointsAwarded  Int?
  submissionUrl  String?
  activeSeconds  Int?           @default(0)
  startedAt      DateTime?
  lastActivityAt DateTime?
  accuracy       Int?
  recipeName     String?

  feedback ParentFeedback?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, taskId, createdAt])
  @@map("student_progress")
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId String          @unique
  student           User            @relation(fields: [studentId], references: [id])
  studentId         String
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())

  @@map("parent_feedback")
}

// Modèle pour les sessions de cours
model CoursSession {
  id                        String     @id @default(cuid())
  professeur                User       @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  professeurId              String
  participants              User[]     @relation("ParticipantsDeSession")
  createdAt                 DateTime   @default(now())
  endedAt                   DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId    String?
  classroom                 Classroom? @relation(fields: [classroomId], references: [id])
  classroomId               String?

  @@map("cours_sessions")
}

// Modèle pour le chat
model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
  @@map("conversations")
}

model Message {
  id         String     @id @default(cuid())
  message    String
  sender     User       @relation(fields: [senderId], references: [id])
  senderId   String
  senderName String
  createdAt  DateTime   @default(now())
  isQuestion Boolean?
  reactions  Reaction[]

  // Un message appartient soit à une classe, soit à une conversation directe
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  classroomId    String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
  @@map("reactions")
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("announcements")
}

model Achievement {
  id          String               @id @default(cuid())
  name        String               @unique
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]

  @@map("achievements")
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
  @@map("student_achievements")
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]

  @@map("final_rounds")
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  score        Int        @default(0)
  joinedAt     DateTime   @default(now())

  @@unique([finalRoundId, studentId])
  @@map("final_round_participants")
}
