// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  role                  Role
  ambition              String?
  points                Int            @default(0)
  image                 String?
  classeId              String?
  classe                Classe?        @relation("ElevesEnClasse", fields: [classeId], references: [id], onDelete: SetNull)
  classesEnseignees     Classe[]       @relation("ClassesEnseignees")
  etat                  EtatEleve?
  sessionsEnseignees    CoursSession[] @relation("SessionProfesseur")
  sessionsParticipees   CoursSession[] @relation("SessionParticipants")
  taskCompletions       TaskCompletion[]
  messages              Message[]
  reactions             Reaction[]
  annonces              Annonce[]
  conversationsInitiated Conversation[] @relation("initiator")
  conversationsReceived  Conversation[] @relation("receiver")
}

model Classe {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ClassesEnseignees", fields: [professeurId], references: [id])
  eleves       User[]         @relation("ElevesEnClasse")
  messages     Message[]
  annonces     Annonce[]
  sessions     CoursSession[]
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

model CoursSession {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  endedAt    DateTime?
  professeurId String
  professeur User     @relation("SessionProfesseur", fields: [professeurId], references: [id])
  participants User[] @relation("SessionParticipants")
  classeId     String?  
  classe       Classe?  @relation(fields: [classeId], references: [id], onDelete: SetNull)
  spotlightedParticipantSid String?
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  initiatorId String
  receiverId  String
  initiator   User      @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@unique([initiatorId, receiverId])
}

model Message {
  id              String      @id @default(cuid())
  message         String
  createdAt       DateTime    @default(now())
  senderId        String
  sender          User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderName      String
  classeId        String?
  classe          Classe?     @relation(fields: [classeId], references: [id], onDelete: Cascade)
  conversationId  String?
  conversation    Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions       Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classeId  String?
  classe    Classe?  @relation(fields: [classeId], references: [id], onDelete: Cascade)
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  completions   TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([userId, taskId, completedAt])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
