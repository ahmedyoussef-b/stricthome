// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ELEVE)
  ambition              String?
  points                Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  classeId              String?
  classe                Classe?               @relation("ClasseEleves", fields: [classeId], references: [id])
  classesEnseignees     Classe[]              @relation("ClasseProfesseur")
  sentMessages          Message[]             @relation("MessageSender")
  reactions             Reaction[]
  sessionsParticipees   CoursSession[]        @relation("CoursSessionParticipants")
  sessionsEnseignees    CoursSession[]        @relation("CoursSessionProfesseur")
  etat                  EtatEleve?
  annonces              Annonce[]
  conversationsInitiated Conversation[]     @relation("Initiator")
  conversationsReceived  Conversation[]     @relation("Receiver")
  progress              StudentProgress[]     @relation("StudentProgressToUser")
  leaderboardEntry      Leaderboard?          @relation("LeaderboardToUser")

  @@map("users")
}

model Classe {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ClasseProfesseur", fields: [professeurId], references: [id])
  eleves       User[]         @relation("ClasseEleves")
  messages     Message[]
  annonces     Annonce[]
  sessions     CoursSession[]

  @@map("classes")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@map("etats_eleves")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]

  @@map("metiers")
}

model Message {
  id             String       @id @default(cuid())
  message        String
  createdAt      DateTime     @default(now())
  senderId       String
  senderName     String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  classeId       String?
  classe         Classe?      @relation(fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]

  @@map("messages")
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  messageId String
  message   Message @relation(fields: [messageId], references: [id])

  @@map("reactions")
}

model Conversation {
  id           String    @id @default(cuid())
  initiatorId  String
  receiverId   String
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model CoursSession {
  id                       String   @id @default(cuid())
  professeurId             String
  professeur               User     @relation("CoursSessionProfesseur", fields: [professeurId], references: [id])
  participants             User[]   @relation("CoursSessionParticipants")
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  whiteboardControllerId   String?
  spotlightedParticipantSid String?
  classeId                 String?
  classe                   Classe?  @relation(fields: [classeId], references: [id])
}

model Annonce {
  id         String   @id @default(cuid())
  title      String
  content    String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  classeId   String?
  classe     Classe?  @relation(fields: [classeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Competition System Models
model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  points      Int
  type        TaskType
  difficulty  TaskDifficulty
  category    TaskCategory
  duration    Int // in days

  // Optional fields for future use
  prerequisites Json?
  resources     Json?

  progress StudentProgress[]

  @@map("tasks")
}

model StudentProgress {
  id             String        @id @default(cuid())
  studentId      String
  taskId         String
  status         ProgressStatus @default(PENDING)
  completionDate DateTime?
  submittedProof String?
  pointsAwarded  Int?
  verifiedById   String?
  student        User          @relation("StudentProgressToUser", fields: [studentId], references: [id])
  task           Task          @relation(fields: [taskId], references: [id])

  @@map("student_progress")
}

model Leaderboard {
  id              String  @id @default(cuid())
  studentId       String  @unique
  totalPoints     Int     @default(0)
  dailyPoints     Int     @default(0)
  weeklyPoints    Int     @default(0)
  monthlyPoints   Int     @default(0)
  completedTasks  Int     @default(0)
  currentStreak   Int     @default(0)
  bestStreak      Int     @default(0)
  rank            Int     @default(0)
  medal           String?
  student         User    @relation("LeaderboardToUser", fields: [studentId], references: [id])

  @@map("leaderboards")
}

model CompetitionSettings {
  id String @id @default(cuid())
  academicYear String
  startDate DateTime
  endDate DateTime
  finalRoundDate DateTime
  pointsMultipliers Json

  @@map("competition_settings")
}


// Enums
enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum ProgressStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  VERIFIED
  REJECTED
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}
