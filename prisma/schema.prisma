// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role
  ambition                String?
  points                  Int                     @default(0)
  parentPassword          String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  classe                  Classroom?              @relation("ClassStudents", fields: [classroomId], references: [id])
  classroomId             String?
  classesEnseignees       Classroom[]             @relation("ClassTeacher")
  announcements           Announcement[]
  sessionsParticipees     CoursSession[]          @relation("SessionParticipants")
  sessionsEnseignees      CoursSession[]          @relation("SessionTeacher")
  messages                Message[]
  reactions               Reaction[]
  progress                StudentProgress[]
  achievements            StudentAchievement[]
  leaderboardEntry        Leaderboard?
  etat                    EtatEleve?
  conversationsInitiated  Conversation[]          @relation("Initiator")
  conversationsReceived   Conversation[]          @relation("Receiver")
  parentFeedbacks         ParentFeedback[]

  @@index([classroomId])
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User?          @relation("ClassTeacher", fields: [professeurId], references: [id])
  professeurId String?
  eleves       User[]         @relation("ClassStudents")
  sessions     CoursSession[]
  messages     Message[]
  annonces     Announcement[]

  @@index([professeurId])
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?

  @@index([metierId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model CoursSession {
  id                        String   @id @default(cuid())
  professeur                User     @relation("SessionTeacher", fields: [professeurId], references: [id])
  professeurId              String
  participants              User[]   @relation("SessionParticipants")
  createdAt                 DateTime @default(now())
  endedAt                   DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId    String?
  classroom                 Classroom? @relation(fields: [classroomId], references: [id])
  classroomId               String?

  @@index([professeurId])
  @@index([classroomId])
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  createdAt      DateTime      @default(now())
  sender         User          @relation(fields: [senderId], references: [id])
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
  isQuestion     Boolean?

  @@index([senderId])
  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
  @@index([userId])
  @@index([messageId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
  attachmentUrl String?

  @@index([authorId])
  @@index([classeId])
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  COLLABORATIVE
  CREATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model Task {
  id            String         @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  requiresProof Boolean        @default(false)
  validationType ValidationType @default("PROFESSOR")
  duration      Int? // Duration in minutes for timed tasks
  startTime     String? // For time-based tasks like daily login
  endTime       String? // For time-based tasks
  isActive      Boolean        @default(true)
  attachmentUrl String?
  progress      StudentProgress[]
}

enum ProgressStatus {
  NOT_STARTED
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
}

model StudentProgress {
  id             String         @id @default(cuid())
  student        User           @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  pointsAwarded  Int?
  submissionUrl  String?
  accuracy       Int? // For professor/parent feedback, e.g., 0-100%
  recipeName     String? // Specific field for cooking task
  parentFeedback ParentFeedback?

  @@unique([studentId, taskId, completionDate])
  @@index([studentId])
  @@index([taskId])
}

model ParentFeedback {
    id                  String          @id @default(cuid())
    studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
    studentProgressId   String          @unique
    student             User            @relation(fields: [studentId], references: [id])
    studentId           String
    taste               Int
    presentation        Int
    autonomy            Int
    comment             String?
    createdAt           DateTime        @default(now())

    @@index([studentId])
}

model Achievement {
  id          String               @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
  @@index([studentId])
  @@index([achievementId])
}

model Leaderboard {
  id            String   @id @default(cuid())
  student       User     @relation(fields: [studentId], references: [id])
  studentId     String   @unique
  rank          Int
  totalPoints   Int      @default(0)
  dailyPoints   Int      @default(0)
  weeklyPoints  Int      @default(0)
  monthlyPoints Int      @default(0)
  completedTasks Int     @default(0)
  currentStreak Int      @default(0)
  bestStreak    Int      @default(0)
  updatedAt     DateTime @updatedAt
}

// Models for final competition round
model FinalRound {
  id                  String                  @id @default(cuid())
  name                String                  @default("Grande Finale")
  startTime           DateTime
  endTime             DateTime
  isActive            Boolean                 @default(false)
  participants        FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id                  String      @id @default(cuid())
  finalRound          FinalRound  @relation(fields: [finalRoundId], references: [id])
  finalRoundId        String
  student             User        @relation(fields: [studentId], references: [id])
  studentId           String
  score               Int         @default(0)
  joinedAt            DateTime    @default(now())

  @@unique([finalRoundId, studentId])
  @@index([studentId])
}
