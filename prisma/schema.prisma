// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ELEVE)
  ambition              String?
  points                Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  classeId              String?
  classe                Classe?               @relation(fields: [classeId], references: [id])
  classesEnseignees     Classe[]              @relation("ProfesseurToClasse")
  etat                  EtatEleve?
  sessionsParticipees   CoursSession[]        @relation("SessionParticipants")
  sessionsEnseignees    CoursSession[]        @relation("SessionProfesseur")
  sentMessages          Message[]             @relation("MessageSender")
  reactions             Reaction[]
  taskCompletions       TaskCompletion[]
  annoncesCrees         Annonce[]
  conversationsInitiated Conversation[]       @relation("Initiator")
  conversationsReceived  Conversation[]       @relation("Receiver")
}

model Classe {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  eleves       User[]
  messages     Message[]      @relation("ClassMessages")
  annonces     Annonce[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatsEleve  EtatEleve[]
}

model CoursSession {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  professeurId             String
  professeur               User     @relation("SessionProfesseur", fields: [professeurId], references: [id])
  participants             User[]   @relation("SessionParticipants")
  spotlightedParticipantSid String?
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  senderId       String
  sender         User          @relation("MessageSender", fields: [senderId], references: [id])
  senderName     String
  classeId       String?
  classe         Classe?       @relation("ClassMessages", fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation? @relation("ConversationMessages", fields: [conversationId], references: [id])
  reactions      Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[] @relation("ConversationMessages")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  classeId  String?
  classe    Classe?  @relation(fields: [classeId], references: [id])
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  completions   TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([userId, taskId, completedAt])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
