// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_URL")
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role
  ambition                String?
  points                  Int                     @default(0)
  parentPassword          String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  classe                  Classroom?              @relation("ClassStudents", fields: [classroomId], references: [id])
  classroomId             String?
  sessionsEnseignees      CoursSession[]          @relation("SessionTeacher")
  annonces                Announcement[]          @relation("UserAnnouncements")
  sessionsParticipees     CoursSession[]          @relation("Participants")
  etat                    EtatEleve?
  messages                Message[]
  reactions               Reaction[]
  achievements            StudentAchievement[]
  finalRounds             FinalRoundParticipant[]
  leaderboardEntry        Leaderboard?
  progress                StudentProgress[]
  parentFeedback          ParentFeedback[]
}

model Classroom {
  id                      String                  @id @default(cuid())
  nom                     String
  professeur              User                    @relation("ClassTeacher", fields: [professeurId], references: [id], onDelete: Cascade)
  professeurId            String
  eleves                  User[]                  @relation("ClassStudents")
  sessions                CoursSession[]
  messages                Message[]
  announcements           Announcement[]          @relation("ClassAnnouncements")
}

model CoursSession {
  id                      String       @id @default(cuid())
  professeur              User         @relation("SessionTeacher", fields: [professeurId], references: [id], onDelete: Cascade)
  professeurId            String
  participants            User[]       @relation("Participants")
  createdAt               DateTime     @default(now())
  endedAt                 DateTime?
  classroomId             String?
  classroom               Classroom?   @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  spotlightedParticipantSid String?
  whiteboardControllerId    String?
  finalRound              FinalRound?
}

model EtatEleve {
  id          String  @id @default(cuid())
  eleve       User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId     String  @unique
  isPunished  Boolean @default(false)
  metier      Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
  metierId    String?
}

model Metier {
  id          String     @id @default(cuid())
  nom         String     @unique
  description String
  icon        String?
  theme       Json       @default("{\"backgroundColor\":\"from-gray-100 to-gray-200\",\"textColor\":\"text-gray-800\",\"primaryColor\":\"240 5.9% 10%\",\"accentColor\":\"240 4.8% 95.9%\",\"cursor\":\"cursor-default\"}")
  eleves      EtatEleve[]
}

model Task {
  id             String         @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  requiresProof  Boolean        @default(false)
  validationType ValidationType @default("PROFESSOR")
  attachmentUrl  String?
  duration       Int? // Duration in minutes for continuous tasks
  startTime      String? // e.g., "08:00"
  endTime        String? // e.g., "18:00"
  isActive       Boolean        @default(true)
  progress       StudentProgress[]
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model StudentProgress {
  id             String        @id @default(cuid())
  student        User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  task           Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId         String
  status         ProgressStatus
  completionDate DateTime?
  submissionUrl  String?
  pointsAwarded  Int?
  startedAt      DateTime      @default(now())
  lastActivityAt DateTime?
  activeSeconds  Float?
  accuracy       Int? // For tasks that have a score, like quizzes or judged creations
  recipeName     String? // Specific to the cooking task for now
  feedback       ParentFeedback?

  @@unique([studentId, taskId, completionDate])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED // For professor/parent validated tasks
  FAILED
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  studentProgressId String          @unique
  student           User            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  taste             Int // Goût
  presentation      Int // Présentation
  autonomy          Int // Autonomie
  comment           String?
  createdAt         DateTime        @default(now())
}

model Message {
  id             String     @id @default(cuid())
  message        String
  sender         User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  senderName     String
  createdAt      DateTime   @default(now())
  classroom      Classroom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId    String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  reactions      Reaction[]
  isQuestion     Boolean?
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  @@unique([userId, messageId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId String
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete Cascade)
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation("UserAnnouncements", fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  classe        Classroom? @relation("ClassAnnouncements", fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  points      Int
  criteria    Json // e.g., { "type": "streak", "days": 7 } or { "type": "total_tasks", "count": 50 }
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation("StudentAchievements", fields: [studentId], references: [id], onDelete: Cascade)
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

// Models for the final competition
model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  date         DateTime
  description  String
  session      CoursSession            @relation(fields: [sessionId], references: [id])
  sessionId    String                  @unique
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  student      User       @relation("FinalRoundParticipants", fields: [studentId], references: [id])
  studentId    String
  score        Int?
  rank         Int?

  @@unique([finalRoundId, studentId])
}

// Prisma requires relation fields to be defined on both sides.
// Here we define the opposite side of the Conversation relations
relation ConversationInitiator on User {
  fields: [id]
  references: [initiatorId]
}

relation ConversationReceiver on User {
  fields: [id]
  references: [receiverId]
}

// Define the opposite side for the Classroom teacher relation
relation ClassTeacher on User {
  fields: [id]
  references: [professeurId]
}
