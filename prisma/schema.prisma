// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

//--------------------------------------
// ENUMS
//--------------------------------------

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}


//--------------------------------------
// AUTH
//--------------------------------------

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String?           @unique
  emailVerified        DateTime?
  image                String?
  role                 Role              @default(ELEVE)
  ambition             String?
  points               Int?              @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  classe               Classroom?        @relation("EleveToClasse", fields: [classroomId], references: [id])
  classroomId          String?
  sessionsParticipees  CoursSession[]    @relation("SessionParticipants")
  classesEnseignees    Classroom[]       @relation("ProfesseurToClasse")
  etat                 EtatEleve?
  announcements        Announcement[]
  reactions            Reaction[]
  studentProgress      StudentProgress[]
  leaderboardEntry     Leaderboard?
  sessionsEnseignees   CoursSession[] @relation("ProfesseurToSession")
  conversationsAsInitiator Conversation[] @relation("Initiator")
  conversationsAsReceiver  Conversation[] @relation("Receiver")
  messages             Message[]
  parentPassword       String?
  parentFeedback       ParentFeedback[]
}

model Classroom {
  id                   String         @id @default(cuid())
  nom                  String
  eleves               User[]         @relation("EleveToClasse")
  professeur           User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId         String
  sessions             CoursSession[]
  announcements        Announcement[]
  messages             Message[]
}

//--------------------------------------
// CORE APP
//--------------------------------------

model Metier {
  id          String     @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Task {
  id            String         @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType       @default(DAILY)
  category      TaskCategory
  difficulty    TaskDifficulty
  duration      Int?
  isActive      Boolean        @default(true)
  startTime     String?
  endTime       String?
  requiresProof Boolean        @default(false)
  attachmentUrl String?
  validationType ValidationType @default(PROFESSOR)
  progress      StudentProgress[]
}

model StudentProgress {
  id             String          @id @default(cuid())
  student        User            @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task            @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus  @default(NOT_STARTED)
  completionDate DateTime?
  submissionUrl  String?
  pointsAwarded  Int?
  accuracy       Float?
  feedback       ParentFeedback?
  recipeName     String?

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                 String           @id @default(cuid())
  studentProgress    StudentProgress  @relation(fields: [studentProgressId], references: [id])
  studentProgressId  String           @unique
  student            User             @relation(fields: [studentId], references: [id])
  studentId          String
  taste              Int
  presentation       Int
  autonomy           Int
  comment            String?
  createdAt          DateTime         @default(now())
}


model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
  attachmentUrl String?
}

model CoursSession {
  id                   String  @id @default(cuid())
  professeurId         String
  professeur           User    @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  participants         User[]  @relation("SessionParticipants")
  classroom            Classroom? @relation(fields: [classroomId], references: [id])
  classroomId          String?
  createdAt            DateTime @default(now())
  endedAt              DateTime?
  spotlightedParticipantId String?
  whiteboardControllerId String?
}

model Conversation {
  id            String    @id @default(cuid())
  initiator     User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId   String
  receiver      User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId    String
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id                   String        @id @default(cuid())
  message              String
  senderId             String
  sender               User          @relation(fields: [senderId], references: [id])
  senderName           String
  classroomId          String?
  classroom            Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId       String?
  conversation         Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
  createdAt            DateTime      @default(now())
  reactions            Reaction[]
  isQuestion           Boolean?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())
}


//--------------------------------------
// GAMIFICATION
//--------------------------------------

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id           String   @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}


//--------------------------------------
// COMPETITION
//--------------------------------------

model FinalRound {
  id              String                 @id @default(cuid())
  date            DateTime
  isActive        Boolean                @default(false)
  participants    FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id             String     @id @default(cuid())
  finalRound     FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId   String
  student        User       @relation(fields: [studentId], references: [id])
  studentId      String
  score          Int?
  rank           Int?

  @@unique([finalRoundId, studentId])
}
