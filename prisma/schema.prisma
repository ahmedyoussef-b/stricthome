// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String              @id @default(cuid()) @db.Uuid
  name                  String?
  email                 String?             @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                @default(ELEVE)
  ambition              String?
  points                Int?                @default(0)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  classeId              String?             @db.Uuid
  classe                Classe?             @relation("Appartient", fields: [classeId], references: [id])
  etat                  EtatEleve?
  sessionsParticipees   CoursSession[]      @relation("Participants")
  classesEnseignees     Classe[]            @relation("Enseigne")
  annonces              Annonce[]
  messages              Message[]
  reactions             Reaction[]
  studentProgress       StudentProgress[]
  leaderboard           Leaderboard?
  sentConversations     Conversation[]      @relation("Initiator")
  receivedConversations Conversation[]      @relation("Receiver")
}

model Classe {
  id           String         @id @default(cuid()) @db.Uuid
  nom          String
  professeurId String         @db.Uuid
  professeur   User           @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]         @relation("Appartient")
  sessions     CoursSession[]
  annonces     Annonce[]
  messages     Message[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique @db.Uuid
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String? @db.Uuid
  metier     Metier? @relation(fields: [metierId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model Metier {
  id          String      @id @default(cuid()) @db.Uuid
  nom         String
  description String
  icon        String?
  theme       Json
  EtatEleve   EtatEleve[]
}

model CoursSession {
  id                        String    @id @default(cuid())
  professeurId              String    @db.Uuid
  professeur                User      @relation(fields: [professeurId], references: [id])
  participants              User[]    @relation("Participants")
  createdAt                 DateTime  @default(now())
  endedAt                   DateTime?
  classeId                  String?   @db.Uuid
  classe                    Classe?   @relation(fields: [classeId], references: [id])
  spotlightedParticipantSid String?
  whiteboardControllerId    String?
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String    @db.Uuid
  receiverId  String    @db.Uuid
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  senderId       String        @db.Uuid
  sender         User          @relation(fields: [senderId], references: [id])
  senderName     String
  classeId       String?       @db.Uuid
  classe         Classe?       @relation(fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  authorId  String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id])
  classeId  String?  @db.Uuid
  classe    Classe?  @relation(fields: [classeId], references: [id])

  @@map("annonces")
}

model Task {
  id          String         @id @default(cuid())
  title       String
  description String
  points      Int
  type        TaskType
  difficulty  TaskDifficulty @default(EASY)
  category    TaskCategory   @default(ACADEMIC)
  duration    Int            @default(1) // en jours

  studentProgress StudentProgress[]

  @@map("tasks")
}

model StudentProgress {
  id             String    @id @default(cuid())
  studentId      String    @db.Uuid
  student        User      @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task      @relation(fields: [taskId], references: [id])
  status         String // 'pending', 'in-progress', 'completed', 'verified', 'rejected'
  completionDate DateTime?
  submittedProof String?
  pointsAwarded  Int
  verifiedById   String?   @db.Uuid

  @@unique([studentId, taskId])
  @@map("student_progress")
}

model Leaderboard {
  id             String @id @default(cuid())
  studentId      String @unique @db.Uuid
  student        User   @relation(fields: [studentId], references: [id])
  totalPoints    Int
  dailyPoints    Int    @default(0)
  weeklyPoints   Int    @default(0)
  monthlyPoints  Int    @default(0)
  completedTasks Int
  currentStreak  Int    @default(0)
  bestStreak     Int    @default(0)
  rank           Int
  medal          String? // 'gold', 'silver', 'bronze'

  @@map("leaderboard")
}

model CompetitionSettings {
  id              String   @id @default(cuid())
  academicYear    String   @unique
  startDate       DateTime
  endDate         DateTime
  finalRoundDate  DateTime
  pointsMultipliers Json

  @@map("competition_settings")
}


enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}
