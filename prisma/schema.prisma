
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// ==============================================================
//                         MODÈLES UTILISATEURS
// ==============================================================

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  role            Role           @default(ELEVE)
  points          Int            @default(0)
  ambition        String?
  parentPassword  String?

  // Relations
  sessionsEnseignees    CoursSession[]        @relation("SessionProfessor")
  sessionsParticipees   CoursSession[]        @relation("SessionParticipants")
  announcements         Announcement[]
  reactions             Reaction[]
  messages              Message[]
  studentProgress       StudentProgress[]
  achievements          StudentAchievement[]
  leaderboardEntry      Leaderboard?
  finalRoundParticipations FinalRoundParticipant[]
  etat                  EtatEleve?
  parentFeedbacks       ParentFeedback[]

  // Relation avec la classe (un élève appartient à une classe)
  classroomId       String?
  classe              Classroom?     @relation("ClassStudents", fields: [classroomId], references: [id], onDelete: SetNull)

  // Champs Auth.js
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  PROFESSEUR
  ELEVE
  ADMIN
}

// ==============================================================
//                         MODÈLES CLASSES & SESSIONS
// ==============================================================

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ClassroomTeacher", fields: [professeurId], references: [id], onDelete: NoAction)
  eleves       User[]         @relation("ClassStudents")
  sessions     CoursSession[]
  messages     Message[]
  announcements Announcement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoursSession {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  
  professeurId             String
  professeur               User     @relation("SessionProfessor", fields: [professeurId], references: [id])
  
  participants             User[]   @relation("SessionParticipants")
  
  classroomId              String?
  classroom                Classroom? @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  
  spotlightedParticipantSid  String?
  whiteboardControllerId   String?
}

// ==============================================================
//                         MODÈLES TÂCHES & PROGRESSION
// ==============================================================

model Task {
  id              String            @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  isActive        Boolean           @default(true)
  requiresProof   Boolean           @default(false)
  validationType  ValidationType    @default(PROFESSOR)
  startTime       String?           // Format "HH:mm"
  endTime         String?           // Format "HH:mm"
  duration        Int?              // Duration in minutes for continuous tasks
  attachmentUrl   String?           

  studentProgress StudentProgress[]
}

model StudentProgress {
  id              String        @id @default(cuid())
  studentId       String
  taskId          String
  status          ProgressStatus
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  startedAt       DateTime      @default(now())
  lastActivityAt  DateTime?
  activeSeconds   Int?
  accuracy        Int? // Pourcentage de réussite pour les tâches évaluées
  recipeName      String? // Pour les tâches de cuisine

  student         User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  task            Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parentFeedback  ParentFeedback?

  @@unique([studentId, taskId, completionDate])
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED // Validated by parent or teacher
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}


// ==============================================================
//                         MODÈLES COMMUNICATION
// ==============================================================

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  messages    Message[]

  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id              String      @id @default(cuid())
  message         String
  createdAt       DateTime    @default(now())
  senderId        String
  senderName      String
  isQuestion      Boolean?

  // Un message appartient soit à une classe, soit à une conversation directe
  classroomId     String?
  classroom       Classroom?  @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  conversationId  String?
  conversation    Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  sender          User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  reactions       Reaction[]
}


model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  userId    String
  createdAt DateTime @default(now())

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime  @default(now())
  authorId      String
  classeId      String?

  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classe        Classroom? @relation(fields: [classeId], references: [id], onDelete: SetNull)
}


// ==============================================================
//                      MODÈLES GAMIFICATION & ÉTAT
// ==============================================================

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metierId   String?

  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

model Leaderboard {
  id              String   @id @default(cuid())
  studentId       String   @unique
  totalPoints     Int
  dailyPoints     Int      @default(0)
  weeklyPoints    Int      @default(0)
  monthlyPoints   Int      @default(0)
  rank            Int
  completedTasks  Int      @default(0)
  currentStreak   Int      @default(0)
  bestStreak      Int      @default(0)

  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Achievement {
  id           String               @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  achievementId String
  unlockedAt    DateTime    @default(now())

  student       User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([studentId, achievementId])
}

model FinalRound {
    id String @id @default(cuid())
    title String
    description String
    startDate DateTime
    endDate DateTime
    status FinalRoundStatus @default(UPCOMING)
    participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
    id String @id @default(cuid())
    finalRoundId String
    userId String
    score Int @default(0)
    
    finalRound     FinalRound @relation(fields: [finalRoundId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@unique([finalRoundId, userId])
}

enum FinalRoundStatus {
    UPCOMING
    ONGOING
    COMPLETED
}


// ==============================================================
//                      MODÈLES PARENTS
// ==============================================================

model ParentFeedback {
  id                  String           @id @default(cuid())
  studentProgressId   String           @unique
  studentId           String
  taste               Int // Note sur le goût
  presentation        Int // Note sur la présentation
  autonomy            Int // Note sur l'autonomie
  comment             String?
  createdAt           DateTime         @default(now())
  
  studentProgress     StudentProgress  @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  student             User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// ==============================================================
//                   MODÈLE DE VÉRIFICATION
// ==============================================================
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
