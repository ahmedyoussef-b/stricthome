// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enumérations

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED
  REJECTED
}

enum ValidationType {
  AUTOMATIC
  PROFESSEUR
  PARENT
}


// Modèles

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  parentPassword          String?
  role                    Role                    @default(ELEVE)
  ambition                String?
  points                  Int                     @default(0)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  classe                  Classroom?              @relation("ClassStudents", fields: [classroomId], references: [id])
  classroomId             String?
  sessionsParticipees     CoursSession[]          @relation("SessionParticipants")
  etat                    EtatEleve?
  messages                Message[]
  reactions               Reaction[]
  classesEnseignees       Classroom[]             @relation("ClassTeacher")
  announcements           Announcement[]
  studentProgress         StudentProgress[]
  achievements            StudentAchievement[]
  leaderboardEntry        Leaderboard?
  parentFeedbacks         ParentFeedback[]
  sentConversations       Conversation[]          @relation("Initiator")
  receivedConversations   Conversation[]          @relation("Receiver")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ClassTeacher", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]         @relation("ClassStudents")
  annonces     Announcement[]
  sessions     CoursSession[]
  messages     Message[]
}

model CoursSession {
  id                       String   @id @default(cuid())
  professeur               User     @relation(fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]   @relation("SessionParticipants")
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  whiteboardControllerId   String?
  spotlightedParticipantSid String?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
}

model Task {
  id              String         @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  requiresProof   Boolean        @default(false)
  validationType  ValidationType @default(PROFESSEUR)
  startTime       String?
  endTime         String?
  duration        Int?
  isActive        Boolean        @default(true)
  attachmentUrl   String?
  studentProgress StudentProgress[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model StudentProgress {
  id             String          @id @default(cuid())
  student        User            @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task            @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus  @default(NOT_STARTED)
  completionDate DateTime?
  submissionUrl  String?
  rejectionReason String?
  pointsAwarded  Int?
  accuracy       Int?
  recipeName     String?
  feedback       ParentFeedback?

  @@unique([studentId, taskId, completionDate]) // Ensure progress is unique per day/task/student
}

model ParentFeedback {
    id                  String          @id @default(cuid())
    studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
    studentProgressId   String          @unique
    student             User            @relation(fields: [studentId], references: [id])
    studentId           String
    taste               Int
    presentation        Int
    autonomy            Int
    comment             String?
    createdAt           DateTime        @default(now())
}


model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  rank           Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id          String               @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}


model FinalRound {
    id String @id @default(cuid())
    name String
    date DateTime
    participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
    id String @id @default(cuid())
    finalRound FinalRound @relation(fields: [finalRoundId], references: [id])
    finalRoundId String
    studentId String @unique
    score Int
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  class          Classroom?    @relation(fields: [classroomId], references: [id])
  classroomId    String?
  reactions      Reaction[]
  isQuestion     Boolean?      @default(null)
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
}
