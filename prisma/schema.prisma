// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ELEVE)
  ambition      String?
  points        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  classe      Classroom? @relation(fields: [classroomId], references: [id])
  classroomId String?

  sessionsEnseignees      CoursSession[] @relation("ProfesseurPourCours")
  sessionsParticipees     CoursSession[] @relation("ParticipantsAuCours")
  messages                Message[]
  reactions               Reaction[]
  conversationsInitiated  Conversation[] @relation("Initiator")
  conversationsReceived   Conversation[] @relation("Receiver")
  annonces                Announcement[]
  progress                StudentProgress[]
  leaderboardEntry        Leaderboard?
  etat                    EtatEleve?

  accounts               Account[]
  sessions               Session[]
  classesEnseignees      Classroom[]
  achievements           StudentAchievement[]
  finalRoundParticipations FinalRoundParticipant[]
}

model Classroom {
  id           String    @id @default(cuid())
  nom          String
  professeur   User      @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  annonces     Announcement[]
  messages     Message[]
  sessions     CoursSession[]
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json      // Store theme details like colors, cursor, etc.
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String   @id @default(cuid())
  eleve      User     @relation(fields: [eleveId], references: [id])
  eleveId    String   @unique
  isPunished Boolean  @default(false)
  metier     Metier?  @relation(fields: [metierId], references: [id])
  metierId   String?
}

model CoursSession {
  id                      String   @id @default(cuid())
  professeur              User     @relation("ProfesseurPourCours", fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]   @relation("ParticipantsAuCours")
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
  classroomId             String?
  spotlightedParticipantSid String?
  whiteboardControllerId  String?
}

model Message {
  id             String    @id @default(cuid())
  message        String
  createdAt      DateTime  @default(now())
  senderId       String
  senderName     String
  sender         User      @relation(fields: [senderId], references: [id])
  reactions      Reaction[]
  classroomId    String?
  classroom      Classroom? @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  isQuestion     Boolean?
  
  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String

  @@unique([userId, messageId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@unique([initiatorId, receiverId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  CREATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

model Task {
  id            String         @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty @default(EASY)
  duration      Int? // in minutes
  isActive      Boolean        @default(true)
  prerequisites Json? // Could store IDs of tasks that must be completed first
  startTime     String? // Format HH:mm
  endTime       String? // Format HH:mm
  progress      StudentProgress[]
}

model StudentProgress {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task     @relation(fields: [taskId], references: [id])
  taskId         String
  status         String   @default("NOT_STARTED") // e.g., NOT_STARTED, IN_PROGRESS, COMPLETED, VERIFIED
  completionDate DateTime?
  pointsAwarded  Int?
  startedAt      DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?     @default(0) // Total active seconds tracked for the task

  @@unique([studentId, taskId])
}

model Leaderboard {
  id             String @id @default(cuid())
  student        User   @relation(fields: [studentId], references: [id])
  studentId      String @unique
  rank           Int
  totalPoints    Int    @default(0)
  dailyPoints    Int    @default(0)
  weeklyPoints   Int    @default(0)
  monthlyPoints  Int    @default(0)
  completedTasks Int    @default(0)
  currentStreak  Int    @default(0) // Consecutive days with activity
  bestStreak     Int    @default(0)
  lastActivity   DateTime? @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json // e.g., { "type": "streak", "days": 7 } or { "type": "total_points", "amount": 1000 }
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String     @id @default(cuid())
  student       User       @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime   @default(now())

  @@unique([studentId, achievementId])
}

// Models for the final tournament
model FinalRound {
  id           String   @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean  @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String      @id @default(cuid())
  student      User        @relation(fields: [studentId], references: [id])
  studentId    String
  finalRound   FinalRound  @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  score        Int         @default(0)
  rank         Int?

  @@unique([studentId, finalRoundId])
}
