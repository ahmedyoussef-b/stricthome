// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================================================
// MODÈLES DE L'APPLICATION
// ==================================================================

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  role                Role
  points              Int             @default(0)
  ambition            String?
  classeId            String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // RELATIONS
  classe              Classe?         @relation(fields: [classeId], references: [id])
  etat                EtatEleve?
  sessionsEnseignees  CoursSession[]  @relation("SessionProfesseur")
  sessionsParticipees CoursSession[]  @relation("SessionParticipants")
  classesEnseignees   Classe[]        @relation("ClasseProfesseur") // Champ de relation inverse pour les classes enseignées
  
  annoncesCrees       Annonce[]
  messagesEnvoyes     Message[]
  reactions           Reaction[]
  taskCompletions     TaskCompletion[]

  conversationInitiated Conversation[] @relation("Initiator")
  conversationReceived  Conversation[] @relation("Receiver")

  @@map("users")
}


model EtatEleve {
  id          String    @id @default(cuid())
  eleve       User      @relation(fields: [eleveId], references: [id])
  eleveId     String    @unique
  isPunished  Boolean   @default(false)
  
  metierId    String?
  metier      Metier?   @relation(fields: [metierId], references: [id])

  @@map("etats_eleves")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json // Storing theme as a JSON object
  eleves      EtatEleve[]

  @@map("metiers")
}

model Classe {
  id            String    @id @default(cuid())
  nom           String
  professeurId  String
  
  // RELATIONS
  professeur    User      @relation("ClasseProfesseur", fields: [professeurId], references: [id])
  eleves        User[]
  sessions      CoursSession[]
  annonces      Annonce[]
  messages      Message[]

  @@map("classes")
}

model CoursSession {
  id                        String    @id @default(cuid())
  professeurId              String
  classeId                  String?
  createdAt                 DateTime  @default(now())
  endedAt                   DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId    String?

  // RELATIONS
  professeur                User      @relation("SessionProfesseur", fields: [professeurId], references: [id])
  participants              User[]    @relation("SessionParticipants")
  classe                    Classe?   @relation(fields: [classeId], references: [id])

  @@map("cours_sessions")
}


model Annonce {
  id          String    @id @default(cuid())
  title       String
  content     String
  authorId    String
  classeId    String?
  createdAt   DateTime  @default(now())

  // RELATIONS
  author      User      @relation(fields: [authorId], references: [id])
  classe      Classe?   @relation(fields: [classeId], references: [id])

  @@map("annonces")
}

model Message {
  id              String      @id @default(cuid())
  message         String
  senderId        String
  senderName      String
  classeId        String?
  conversationId  String?
  createdAt       DateTime    @default(now())

  // RELATIONS
  sender          User        @relation(fields: [senderId], references: [id])
  classe          Classe?     @relation(fields: [classeId], references: [id])
  conversation    Conversation? @relation(fields: [conversationId], references: [id])
  reactions       Reaction[]

  @@map("messages")
}

model Reaction {
  id          String   @id @default(cuid())
  emoji       String
  messageId   String
  userId      String

  // RELATIONS
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("reactions")
}

model Conversation {
  id            String    @id @default(cuid())
  initiatorId   String
  receiverId    String
  createdAt     DateTime  @default(now())

  // RELATIONS
  initiator     User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver      User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@unique([initiatorId, receiverId])
  @@map("conversations")
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  points      Int
  type        TaskType
  
  completions TaskCompletion[]

  @@map("tasks")
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  taskId      String
  completedAt DateTime @default(now())

  // RELATIONS
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId, completedAt])
  @@map("task_completions")
}
