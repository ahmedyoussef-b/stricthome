// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String         @id @default(cuid()) @db.Uuid
  name                    String?
  email                   String?        @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role           @default(ELEVE)
  ambition                String?
  points                  Int?           @default(0)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  classeId                String?        @db.Uuid
  classe                  Classe?        @relation("Appartient", fields: [classeId], references: [id])
  etat                    EtatEleve?
  sessionsEnseignees      CoursSession[] @relation("Enseignant")
  sessionsParticipees     CoursSession[] @relation("Participants")
  annonces                Annonce[]
  messages                Message[]
  reactions               Reaction[]
  studentProgress         StudentProgress[]
  leaderboardEntry        Leaderboard?
  conversationsInitiated  Conversation[] @relation("Initiator")
  conversationsReceived   Conversation[] @relation("Receiver")

  @@map("users")
}

enum Role {
  ELEVE
  PROFESSEUR
}

model Classe {
  id           String         @id @default(cuid()) @db.Uuid
  nom          String
  professeurId String         @db.Uuid
  professeur   User           @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]         @relation("Appartient")
  sessions     CoursSession[]
  annonces     Annonce[]
  messages     Message[]

  @@map("classes")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]

  @@map("metiers")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique @db.Uuid
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@map("etats_eleves")
}

model CoursSession {
  id                        String    @id @default(cuid())
  professeurId              String    @db.Uuid
  professeur                User      @relation("Enseignant", fields: [professeurId], references: [id])
  participants              User[]    @relation("Participants")
  createdAt                 DateTime  @default(now())
  endedAt                   DateTime?
  classeId                  String?   @db.Uuid
  classe                    Classe?   @relation(fields: [classeId], references: [id])
  spotlightedParticipantSid String?
  whiteboardControllerId    String?

  @@map("cours_sessions")
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String    @db.Uuid
  receiverId  String    @db.Uuid
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String        @db.Uuid
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderName     String
  classeId       String?       @db.Uuid
  classe         Classe?       @relation(fields: [classeId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions      Reaction[]
  createdAt      DateTime      @default(now())

  @@map("messages")
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("reactions")
}

model Annonce {
  id         String   @id @default(cuid())
  title      String
  content    String
  authorId   String   @db.Uuid
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classeId   String?  @db.Uuid
  classe     Classe?  @relation(fields: [classeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("annonces")
}

// Gamification Models
enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  CREATIVE
  PERSONAL
}

model Task {
  id              String   @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  difficulty      TaskDifficulty     @default(EASY)
  category        TaskCategory       @default(ACADEMIC)
  duration        Int                @default(1) // in days
  studentProgress StudentProgress[]
  createdAt       DateTime           @default(now())

  @@map("tasks")
}

model StudentProgress {
  id             String    @id @default(cuid())
  studentId      String    @db.Uuid
  student        User      @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task      @relation(fields: [taskId], references: [id])
  status         String // e.g., 'IN_PROGRESS', 'COMPLETED', 'VERIFIED'
  completionDate DateTime?
  pointsAwarded  Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([studentId, taskId])
  @@map("student_progress")
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique @db.Uuid
  student        User     @relation(fields: [studentId], references: [id])
  totalPoints    Int
  rank           Int
  completedTasks Int
  updatedAt      DateTime @updatedAt

  @@map("leaderboards")
}

model CompetitionSettings {
  id         String   @id @default(cuid())
  seasonName String
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean

  @@map("competition_settings")
}
