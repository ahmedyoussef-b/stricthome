// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // REMOVE: relationMode = "prisma"
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  role                Role      @default(ELEVE)
  points              Int       @default(0)
  ambition            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  classeId            String?
  classe              Classe?   @relation("ClasseEleves", fields: [classeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  etat                EtatEleve?

  sessionsEnseignees  CoursSession[] @relation("SessionProfesseur")
  sessionsParticipees CoursSession[] @relation("SessionParticipants")
  
  classesEnseignees   Classe[] @relation("ClasseProfesseur")
  
  taskCompletions     TaskCompletion[]
  messages            Message[]
  reactions           Reaction[]
  annonces            Annonce[]

  // For direct messaging
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")
  
  @@map("users")
}

model Classe {
  id            String    @id @default(cuid())
  nom           String
  
  eleves        User[]    @relation("ClasseEleves")
  
  professeur    User      @relation("ClasseProfesseur", fields: [professeurId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  professeurId  String
  
  messages      Message[]
  annonces      Annonce[]
  sessions      CoursSession[]
  
  @@map("classes")
}

model EtatEleve {
  id          String  @id @default(cuid())
  eleveId     String  @unique
  eleve       User    @relation(fields: [eleveId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isPunished  Boolean @default(false)
  metierId    String?
  metier      Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("etats_eleves")
}

model Metier {
  id           String      @id @default(cuid())
  nom          String
  description  String
  icon         String?
  theme        Json
  etatsEleves  EtatEleve[]

  @@map("metiers")
}

model CoursSession {
  id                      String    @id @default(cuid())
  professeur              User      @relation("SessionProfesseur", fields: [professeurId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professeurId            String
  participants            User[]    @relation("SessionParticipants")
  createdAt               DateTime  @default(now())
  endedAt                 DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId  String?

  classe    Classe? @relation(fields: [classeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  classeId  String?
  
  @@map("sessions_cours")
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  completions     TaskCompletion[]

  @@map("tasks")
}

model TaskCompletion {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId        String
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  completedAt   DateTime @default(now())

  @@unique([userId, taskId, completedAt])
  @@map("task_completions")
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId  String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
  @@map("conversations")
}

model Message {
  id              String      @id @default(cuid())
  message         String
  senderId        String
  sender          User        @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderName      String
  
  classeId        String?
  classe          Classe?     @relation(fields: [classeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  conversationId  String?
  conversation    Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt       DateTime    @default(now())
  reactions       Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, messageId, emoji])
  @@map("reactions")
}

model Annonce {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classeId    String?
  classe      Classe?  @relation(fields: [classeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt   DateTime @default(now())

  @@map("annonces")
}

enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}