// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  emailVerified           DateTime?
  image                   String?
  password                String? // Pour l'authentification par identifiants
  parentPassword          String? // Mot de passe pour la validation parentale
  points                  Int                     @default(0)
  ambition                String?
  role                    Role
  classe                  Classroom?              @relation("ElevesDeClasse", fields: [classroomId], references: [id])
  classroomId             String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  sessionsParticipees     CoursSession[]          @relation("ParticipantsDeSession")
  classesEnseignees       Classroom[]             @relation("ProfesseurDeClasse")
  messages                Message[]
  reactions               Reaction[]
  etat                    EtatEleve?
  leaderboardEntry        Leaderboard?
  announcements           Announcement[]
  finalRoundsParticipant  FinalRoundParticipant[]
  initiatedConversations  Conversation[]          @relation("initiatedConversations")
  receivedConversations   Conversation[]          @relation("receivedConversations")
  studentAchievements     StudentAchievement[]
  parentFeedbacks         ParentFeedback[]

  @@index([classroomId])
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ProfesseurDeClasse", fields: [professeurId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  professeurId String
  eleves       User[]         @relation("ElevesDeClasse")
  messages     Message[]
  announcement Announcement[]
  sessions     CoursSession[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String    @id @default(cuid())
  nom         String    @unique
  description String
  icon        String?
  theme       Json // { backgroundColor, textColor, primaryColor, accentColor, cursor, imageUrl }
  etatsEleves EtatEleve[]
}

model Leaderboard {
  id             String @id @default(cuid())
  student        User   @relation(fields: [studentId], references: [id])
  studentId      String @unique
  rank           Int
  totalPoints    Int    @default(0)
  dailyPoints    Int    @default(0)
  weeklyPoints   Int    @default(0)
  monthlyPoints  Int    @default(0)
  completedTasks Int    @default(0)
  currentStreak  Int    @default(0)
  bestStreak     Int    @default(0)
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

model Task {
  id               String            @id @default(cuid())
  title            String
  description      String
  points           Int
  type             TaskType
  category         TaskCategory
  difficulty       TaskDifficulty
  duration         Int? // in minutes for continuous tasks
  startTime        String? // HH:mm format for time-window tasks
  endTime          String? // HH:mm format
  isActive         Boolean           @default(true)
  requiresProof    Boolean           @default(false)
  requiresAccuracy Boolean           @default(false) // For tasks needing a score
  progress         user_task_progress[]
}

enum ProgressStatus {
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION // Nouvelle étape pour les tâches manuelles
  VERIFIED // Validé par le parent/prof
  FAILED
}

model user_task_progress {
  id             String         @id @default(cuid())
  student        User           @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus @default(IN_PROGRESS)
  startedAt      DateTime       @default(now())
  completionDate DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?
  pointsAwarded  Int?
  submissionUrl  String?
  accuracy       Int? // Pourcentage de réussite (ex: poésie)
  recipeName     String?
  feedback       ParentFeedback?

  @@map("student_progress")
}

model ParentFeedback {
  id                  String             @id @default(cuid())
  studentProgress     user_task_progress @relation(fields: [studentProgressId], references: [id])
  studentProgressId   String             @unique
  taste               Int
  presentation        Int
  autonomy            Int
  comment             String?
  createdAt           DateTime           @default(now())
  author              User               @relation(fields: [authorId], references: [id])
  authorId            String
}

// Modèle pour les succès (Achievements)
model Achievement {
  id                  String               @id @default(cuid())
  name                String
  description         String
  icon                String
  points              Int
  criteria            Json // { type: 'total_tasks', count: 50 }, { type: 'streak', days: 7 }
  studentAchievements StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model Message {
  id             String       @id @default(cuid())
  message        String
  createdAt      DateTime     @default(now())
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  classroomId    String?
  classroom      Classroom?   @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
  isQuestion     Boolean?
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("initiatedConversations", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("receivedConversations", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
}

model CoursSession {
  id                      String    @id @default(cuid())
  professeur              User      @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]    @relation("ParticipantsDeSession")
  createdAt               DateTime  @default(now())
  endedAt                 DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId  String?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
  classroomId             String?
}

// Modèles pour le mode "Final Round"
model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  score        Int        @default(0)
  joinedAt     DateTime   @default(now())

  @@unique([finalRoundId, userId])
}
