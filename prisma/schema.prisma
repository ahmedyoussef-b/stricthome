// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================
// ENUMS
// ==============================================================

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  COLLABORATIVE
  CREATIVE
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

// ==============================================================
// AUTH MODELS
// ==============================================================

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  role                   Role                    @default(ELEVE)
  ambition               String?
  points                 Int?                    @default(0)
  parentPassword         String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  classe                 Classroom?              @relation("EleveToClasse", fields: [classroomId], references: [id])
  classroomId            String?
  etat                   EtatEleve?
  sessionsParticipees    CoursSession[]          @relation("SessionParticipants")
  annonces               Announcement[]
  progress               StudentProgress[]
  leaderboardEntry       Leaderboard?
  reactions              Reaction[]
  messages               Message[]
  sessionsEnseignees     CoursSession[]          @relation("ProfesseurToSession")
  classesEnseignees      Classroom[]             @relation("ProfesseurToClasse")
  achievements           StudentAchievement[]
  initiatedConversations Conversation[]          @relation("InitiatorToConversation")
  receivedDirectMessages Conversation[]          @relation("ReceiverToConversation")
  FinalRoundParticipant  FinalRoundParticipant[]
}

// ==============================================================
// APP MODELS
// ==============================================================

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeur    User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId  String
  eleves        User[]         @relation("EleveToClasse")
  sessions      CoursSession[]
  announcements Announcement[]
  messages      Message[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json // { backgroundColor, textColor, primaryColor, accentColor, cursor, imageUrl }
  etats       EtatEleve[]
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  requiresProof   Boolean          @default(false)
  validationType  ValidationType   @default(PROFESSOR)
  isActive        Boolean          @default(true)
  duration        Int? // in minutes, for specific tasks like concentration
  startTime       String? // HH:MM for time-based tasks
  endTime         String? // HH:MM for time-based tasks
  attachmentUrl   String?
  studentProgress StudentProgress[]
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  submissionUrl   String?
  rejectionReason String?
  pointsAwarded   Int?
  accuracy        Float?
  recipeName      String?
  parentFeedback  ParentFeedback?

  @@unique([studentId, taskId, completionDate]) // Ensures a student can't complete the same task multiple times on the same day unless it's repeatable
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  updatedAt      DateTime @updatedAt
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId String          @unique
  studentId         String
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}

// ==============================================================
// SESSION & CHAT
// ==============================================================

model CoursSession {
  id                       String       @id @default(cuid())
  createdAt                DateTime     @default(now())
  endedAt                  DateTime?
  professeur               User         @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]       @relation("SessionParticipants")
  classroom                Classroom?   @relation(fields: [classroomId], references: [id])
  classroomId              String?
  spotlightedParticipantId String?
  whiteboardControllerId   String?
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("InitiatorToConversation", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("ReceiverToConversation", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@unique([initiatorId, receiverId])
}

model Message {
  id                    String        @id @default(cuid())
  message               String
  createdAt             DateTime      @default(now())
  sender                User          @relation(fields: [senderId], references: [id])
  senderId              String
  senderName            String
  isQuestion            Boolean?
  classroomId           String?
  classroom             Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId        String?
  conversation          Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
  reactions             Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
}

// ==============================================================
// ACHIEVEMENTS & FINAL ROUND
// ==============================================================

model Achievement {
  id          String               @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json // e.g. { "type": "streak", "days": 7 } or { "type": "total_tasks", "count": 50 }
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id             String     @id @default(cuid())
  student        User       @relation(fields: [studentId], references: [id])
  studentId      String
  finalRound     FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId   String
  score          Int
  rank           Int
  achievedAt     DateTime   @default(now())

  @@unique([studentId, finalRoundId])
}
