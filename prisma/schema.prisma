
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ELEVE)
  ambition              String?
  points                Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  classeId              String?
  classe                Classe?               @relation("ElevesEnClasse", fields: [classeId], references: [id], onDelete: SetNull)
  classesEnseignees     Classe[]              @relation("ClassesEnseignees")
  
  etat                  EtatEleve?
  sessionsParticipees   CoursSession[]
  taskCompletions       TaskCompletion[]
  messages              Message[]
  reactions             Reaction[]
  annonces              Annonce[]
  conversationsInitiated Conversation[]       @relation("initiator")
  conversationsReceived  Conversation[]       @relation("receiver")
}

model Classe {
  id             String         @id @default(cuid())
  nom            String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  professeurId   String?
  professeur     User?          @relation("ClassesEnseignees", fields: [professeurId], references: [id])
  eleves         User[]         @relation("ElevesEnClasse")
  
  sessions       CoursSession[]
  messages       Message[]
  annonces       Annonce[]
}

model EtatEleve {
  id         String   @id @default(cuid())
  eleve      User     @relation(fields: [eleveId], references: [id])
  eleveId    String   @unique
  isPunished Boolean  @default(false)
  metier     Metier?  @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model CoursSession {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  endedAt     DateTime?
  
  professeurId String
  professeur   User     @relation(fields: [professeurId], references: [id])
  
  participants User[]
  
  spotlightedParticipantSid String?
  classe      Classe?  @relation(fields: [classeId], references: [id])
  classeId    String?
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  completions     TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id])
  completedAt DateTime @default(now())

  @@unique([userId, taskId, completedAt])
}

model Message {
  id            String      @id @default(cuid())
  message       String
  createdAt     DateTime    @default(now())
  senderId      String
  sender        User        @relation(fields: [senderId], references: [id])
  senderName    String
  
  classeId      String?
  classe        Classe?     @relation(fields: [classeId], references: [id])

  conversationId String?
  conversation  Conversation? @relation(fields: [conversationId], references: [id])

  reactions     Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  initiator   User      @relation("initiator", fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation("receiver", fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@unique([initiatorId, receiverId])
}

model Annonce {
  id         String   @id @default(cuid())
  title      String
  content    String
  createdAt  DateTime @default(now())
  
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  
  classeId   String?
  classe     Classe?  @relation(fields: [classeId], references: [id])
}


enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
