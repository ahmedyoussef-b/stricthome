
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =====================================
// AUTH
// =====================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  role                Role            @default(ELEVE)
  accounts            Account[]
  sessions            Session[]
  ambition            String?
  points              Int             @default(0)
  classeId            String?
  classe              Classe?         @relation("ElevesEnClasse", fields: [classeId], references: [id], onDelete: SetNull)
  classesEnseignees   Classe[]        @relation("ClassesEnseignees")
  sessionsEnseignees  CoursSession[]  @relation("SessionProfesseur")
  sessionsParticipees CoursSession[]  @relation("SessionParticipants")
  messagesEnvoyes     Message[]
  etat                EtatEleve?
  taskCompletions     TaskCompletion[]
  reactions           Reaction[]
  annonces            Annonce[]
  conversationsInitiees Conversation[] @relation("Initiator")
  conversationsRecues   Conversation[] @relation("Receiver")
}

// =====================================
// APPLICATION
// =====================================

model Classe {
  id           String   @id @default(cuid())
  nom          String
  professeurId String
  professeur   User     @relation("ClassesEnseignees", fields: [professeurId], references: [id])
  eleves       User[]   @relation("ElevesEnClasse")
  messages     Message[]
  annonces     Annonce[]
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  senderId       String
  senderName     String
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  classeId       String?
  classe         Classe?       @relation(fields: [classeId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions      Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model Conversation {
  id           String    @id @default(cuid())
  initiatorId  String
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiverId   String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model CoursSession {
  id                      String    @id @default(cuid())
  createdAt               DateTime  @default(now())
  endedAt                 DateTime?
  professeurId            String
  professeur              User      @relation("SessionProfesseur", fields: [professeurId], references: [id])
  participants            User[]    @relation("SessionParticipants")
  spotlightedParticipantSid String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  points      Int
  type        TaskType
  completions TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([userId, taskId, completedAt])
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classeId  String?
  classe    Classe?  @relation(fields: [classeId], references: [id], onDelete: Cascade)
}
