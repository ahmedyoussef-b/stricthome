// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTgres_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// ==================================
//          MODÈLES UTILISATEURS
// ==================================
model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  role                Role      @default(ELEVE)
  ambition            String?
  points              Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  sessionsParticipees CoursSession[]
  annonces            Annonce[]
  messages            Message[]
  reactions           Reaction[]
  progress            StudentProgress[]
  achievements        StudentAchievement[]
  leaderboardEntry    Leaderboard?
  etat                EtatEleve?
  
  // Relations to Classe
  classeId            String?
  classe              Classe?   @relation("AppartientA", fields: [classeId], references: [id])
  classesEnseignees   Classe[]  @relation("Enseigne")

  accounts            Account[]
  sessions            Session[]
  
  initiatedConversations Conversation[] @relation("InitiatedConversations")
  receivedConversations  Conversation[] @relation("ReceivedConversations")
}

model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeurId String
  professeur   User      @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]    @relation("AppartientA")
  sessions     CoursSession[]
  annonces     Annonce[]
  messages     Message[]
}

model Metier {
  id          String   @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json     @default("{}")
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

// ==================================
//      MODÈLES D'AUTHENTIFICATION
// ==================================
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================================
//      MODÈLES DE L'APPLICATION
// ==================================

model CoursSession {
  id                     String    @id @default(cuid())
  professeurId           String
  professeur             User      @relation(fields: [professeurId], references: [id])
  classeId               String?
  classe                 Classe?   @relation(fields: [classeId], references: [id])
  createdAt              DateTime  @default(now())
  endedAt                DateTime?
  participants           User[]
  spotlightedParticipantSid String?
  whiteboardControllerId String?
}

model Annonce {
  id            String   @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime @default(now())
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classe?  @relation(fields: [classeId], references: [id])
  attachmentUrl String?
}

// Modele pour les messages dans le chat
model Message {
  id             String      @id @default(cuid())
  message        String
  createdAt      DateTime    @default(now())
  senderId       String
  senderName     String
  sender         User        @relation(fields: [senderId], references: [id])
  classeId       String?
  classe         Classe?     @relation(fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
}

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  initiatorId  String
  initiator    User      @relation("InitiatedConversations", fields: [initiatorId], references: [id])
  receiverId   String
  receiver     User      @relation("ReceivedConversations", fields: [receiverId], references: [id])
  messages     Message[]

  @@unique([initiatorId, receiverId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
}

// ==================================
//      MODÈLES DE GAMIFICATION
// ==================================

model Task {
  id            String          @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType        @default(DAILY)
  category      TaskCategory    @default(ACADEMIC)
  difficulty    TaskDifficulty  @default(EASY)
  isActive      Boolean         @default(true)
  duration      Int?            // Duration in minutes for completion
  prerequisites Json?           // e.g., { "requiredTaskId": "cl..." }
  startTime     String?         // e.g., "18:00"
  endTime       String?         // e.g., "19:00"
  studentProgress StudentProgress[]
}

model StudentProgress {
  id             String    @id @default(cuid())
  studentId      String
  student        User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task      @relation(fields: [taskId], references: [id])
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  pointsAwarded  Int?
  startedAt      DateTime?
  lastActivityAt DateTime?
  activeSeconds  Float?

  @@unique([studentId, taskId])
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  rank           Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id          String    @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String     @id @default(cuid())
  studentId     String
  student       User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt    DateTime   @default(now())

  @@unique([studentId, achievementId])
}


// ==>> Tournoi / Final Round <<==

model FinalRound {
  id              String   @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(false)
  participants    FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id            String      @id @default(cuid())
  finalRoundId  String
  finalRound    FinalRound  @relation(fields: [finalRoundId], references: [id])
  studentId     String
  student       User        @relation(fields: [studentId], references: [id])
  score         Int         @default(0)
  rank          Int?
  joinedAt      DateTime    @default(now())

  @@unique([finalRoundId, studentId])
}


// ==================================
//              ENUMS
// ==================================

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  CREATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED // For tasks that need teacher approval
  FAILED
}
