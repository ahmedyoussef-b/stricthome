// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String?                @unique
  emailVerified    DateTime?
  image            String?
  role             Role                   @default(ELEVE)
  ambition         String?
  points           Int?                   @default(0)
  parentPassword   String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  // Relation to the class they teach, if they are a professor
  classesEnseignees Classroom[]            @relation("ClassroomTeacher")
  // Relation to the class they belong to, if they are a student
  classroomId      String?
  classe           Classroom?             @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  // State of the student
  etat             EtatEleve?
  // Sessions they created (as a professor)
  sessionsCrees    CoursSession[]         @relation("SessionProfessor")
  // Sessions they participate in (as a student)
  sessions         SessionParticipant[]
  // Chat messages
  messages         Message[]
  // Reactions to messages
  reactions        Reaction[]
  // Announcements they authored
  announcements    Announcement[]
  // Achievements
  achievements     StudentAchievement[]
  // Leaderboard entry
  leaderboardEntry Leaderboard?
  // Progress on tasks
  progress         StudentProgress[]
  // Final round participation
  finalRoundEntries FinalRoundParticipant[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  // Relation to the teacher
  professeurId String
  professeur   User           @relation("ClassroomTeacher", fields: [professeurId], references: [id], onDelete: NoAction)
  // Relation to students
  eleves       User[]
  // Sessions held in this class
  sessions     CoursSession[]
  // Chat messages in this class
  messages     Message[]
  // Announcements for this class
  announcements Announcement[]

  @@index([professeurId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json // { backgroundColor, textColor, cursor, imageUrl, etc. }
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@index([metierId])
}

model CoursSession {
  id                       String        @id @default(cuid())
  createdAt                DateTime      @default(now())
  endedAt                  DateTime?
  // Relation to the teacher
  professeurId             String
  professeur               User          @relation("SessionProfessor", fields: [professeurId], references: [id], onDelete: Cascade)
  // Relation to classroom
  classroomId              String?
  classroom                Classroom?    @relation(fields: [classroomId], references: [id])
  // Spotlight
  spotlightedParticipantSid String?
  // Whiteboard
  whiteboardControllerId   String?
  // Relation Many-to-Many via table de liaison
  participants             SessionParticipant[]
}

model SessionParticipant {
  id        String       @id @default(cuid())
  sessionId String
  userId    String
  session   CoursSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  statut    ParticipationStatut @default(ACTIVE)

  @@unique([sessionId, userId])
}

enum ParticipationStatut {
  ACTIVE
  INACTIVE
  PENDING
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  initiator   User      @relation(fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  createdAt      DateTime      @default(now())
  // Relation to a class chat
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  // Relation to a direct message
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  // Reactions
  reactions      Reaction[]
  // AI analysis cache
  isQuestion     Boolean?

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([classroomId])
  @@index([conversationId])
  @@index([senderId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  authorId      String
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id], onDelete: SetNull)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum Role {
  ELEVE
  PROFESSEUR
}

// Competition System
model Task {
  id               String         @id @default(cuid())
  title            String
  description      String
  points           Int
  type             TaskType
  category         TaskCategory
  difficulty       TaskDifficulty
  isActive         Boolean        @default(true)
  requiresProof    Boolean        @default(false)
  validationType   ValidationType @default(PROFESSOR)
  attachmentUrl    String?
  // For time-based tasks
  duration         Int? // in minutes
  startTime        String? // HH:mm
  endTime          String? // HH:mm
  progress         StudentProgress[]
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus
  completionDate DateTime?
  submissionUrl  String?
  startedAt      DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?
  pointsAwarded  Int?
  accuracy       Float? // For tasks requiring a score (0-100)
  recipeName     String? // Specific for the cooking task
  parentFeedback ParentFeedback?

  @@unique([studentId, taskId, completionDate])
  @@index([studentId])
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgressId String          @unique
  progress          StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentId         String
  student           User            @relation(fields: [studentId], references: [id])
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())

  @@index([studentId])
}


enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  rank           Int
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id           String    @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json // e.g., { type: 'streak', days: 7 } or { type: 'total_tasks', count: 50 }
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

// Final Round Models
model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id             String     @id @default(cuid())
  finalRound     FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId   String
  studentId      String
  student        User       @relation(fields: [studentId], references: [id])
  score          Int        @default(0)
  isWinner       Boolean    @default(false)

  @@unique([finalRoundId, studentId])
}
