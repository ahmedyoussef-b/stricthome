// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  emailVerified       DateTime?
  image               String?
  role                Role             @default(ELEVE)
  ambition            String?
  points              Int              @default(0)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  classeId            String?
  classe              Classe?          @relation(fields: [classeId], references: [id])
  classesEnseignees   Classe[]
  sessionsParticipees CoursSession[]
  etat                EtatEleve?
  messagesEnvoyes     Message[]
  reactions           Reaction[]
  taskCompletions     TaskCompletion[]
  initiatedDm         Conversation[]   @relation("Initiator")
  receivedDm          Conversation[]   @relation("Receiver")
  announcements       Annonce[]

  @@index([classeId])
}

model EtatEleve {
  id         String  @id @default(cuid())
  isPunished Boolean @default(false)
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@index([metierId])
}

model Classe {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation(fields: [professeurId], references: [id])
  eleves       User[]
  chatroomId   String         @unique
  chatroom     Chatroom       @relation(fields: [chatroomId], references: [id])
  annonces     Annonce[]

  @@index([professeurId])
}

model Chatroom {
  id       String    @id @default(cuid())
  messages Message[]
  classe   Classe?
}

model Message {
  id             String         @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  createdAt      DateTime       @default(now())
  chatroomId     String?
  chatroom       Chatroom?      @relation(fields: [chatroomId], references: [id])
  reactions      Reaction[]
  conversationId String?
  conversation   Conversation?  @relation(fields: [conversationId], references: [id])

  @@index([chatroomId])
  @@index([conversationId])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
}


model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
  @@index([messageId])
}


model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  etatsEleve  EtatEleve[]
}

model CoursSession {
  id           String   @id @default(cuid())
  professeurId String
  professeur   User     @relation(fields: [professeurId], references: [id])
  participants User[]
  createdAt    DateTime @default(now())
  endedAt      DateTime?
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  completions   TaskCompletion[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([userId, taskId, completedAt])
  @@index([userId])
  @@index([taskId])
}

model Annonce {
  id          String    @id @default(cuid())
  title       String
  content     String
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  classeId    String?
  classe      Classe?   @relation(fields: [classeId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
  @@index([classeId])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
