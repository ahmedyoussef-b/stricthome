// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role      @default(ELEVE)
  points                  Int       @default(0)
  ambition                String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  classeId                String?   @db.Uuid
  classe                  Classe?   @relation("Appartient", fields: [classeId], references: [id])
  sessionsEnseignees      Classe[]  @relation("Enseigne")
  sessionsParticipees     CoursSession[] @relation("Participants")
  messages                Message[]
  reactions               Reaction[]
  annonces                Annonce[]
  etat                    EtatEleve?
  progress                StudentProgress[]
  leaderboardEntry        Leaderboard?
  studentAchievements     StudentAchievement[]
  finalRoundParticipations FinalRoundParticipant[]

  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")

  @@map("users")
}

model Classe {
  id           String         @id @default(cuid()) @db.Uuid
  nom          String
  professeurId String         @db.Uuid
  professeur   User           @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]         @relation("Appartient")
  messages     Message[]
  sessions     CoursSession[]
  annonces     Annonce[]
}

model CoursSession {
  id                      String    @id @default(cuid())
  createdAt               DateTime  @default(now())
  endedAt                 DateTime?
  professeurId            String    @db.Uuid
  professeur              User      @relation(fields: [professeurId], references: [id])
  participants            User[]    @relation("Participants")
  classeId                String?   @db.Uuid
  classe                  Classe?   @relation(fields: [classeId], references: [id])
  spotlightedParticipantSid String?
  whiteboardControllerId  String?
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]
}

model Message {
  id             String         @id @default(cuid())
  message        String
  createdAt      DateTime       @default(now())
  senderId       String
  sender         User           @relation(fields: [senderId], references: [id])
  senderName     String
  classeId       String?        @db.Uuid
  classe         Classe?        @relation(fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation?  @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  initiatorId String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  messageId String
  message   Message @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId, emoji])
}

model Annonce {
  id         String    @id @default(cuid())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  classeId   String?
  classe     Classe?   @relation(fields: [classeId], references: [id])

  @@map("annonces")
}

model Task {
  id            String          @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType        @default(DAILY)
  difficulty    TaskDifficulty  @default(MEDIUM)
  category      TaskCategory    @default(ACADEMIC)
  duration      Int?
  isActive      Boolean         @default(true)
  prerequisites Json?
  studentProgress StudentProgress[]
}

model StudentProgress {
  id              String   @id @default(cuid())
  studentId       String
  student         User     @relation(fields: [studentId], references: [id])
  taskId          String
  task            Task     @relation(fields: [taskId], references: [id])
  status          TaskStatus @default(NOT_STARTED)
  completionDate  DateTime?
  pointsAwarded   Int?
  
  @@unique([studentId, taskId])
}

model Leaderboard {
  id              String   @id @default(cuid())
  studentId       String   @unique
  student         User     @relation(fields: [studentId], references: [id])
  totalPoints     Int      @default(0)
  dailyPoints     Int      @default(0)
  weeklyPoints    Int      @default(0)
  monthlyPoints   Int      @default(0)
  rank            Int
  completedTasks  Int      @default(0)
  currentStreak   Int      @default(0)
  bestStreak      Int      @default(0)
}

model Achievement {
  id          String  @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json 
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String     @id @default(cuid())
  studentId     String
  student       User       @relation(fields: [studentId], references: [id])
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt    DateTime   @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id           String      @id @default(cuid())
  startDate    DateTime
  endDate      DateTime
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String   @id @default(cuid())
  studentId    String
  student      User     @relation(fields: [studentId], references: [id])
  finalRoundId String
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  score        Int
  rank         Int

  @@unique([studentId, finalRoundId])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  CREATIVE
  PERSONAL
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED
}
