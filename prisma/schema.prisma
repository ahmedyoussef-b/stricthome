// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role
  ambition      String?
  points        Int       @default(0)

  // Relations
  classeId String?
  classe   Classe? @relation(fields: [classeId], references: [id])

  classesEnseignees Classe[] @relation("ProfesseurToClasse")

  etat EtatEleve?

  sessionsEnseignees  CoursSession[] @relation("ProfesseurToSession")
  sessionsParticipees CoursSession[] @relation("ParticipantsToSession")

  sentMessages    Message[]        @relation("Sender")
  reactions       Reaction[]
  taskCompletions TaskCompletion[]
  annoncesCrees   Annonce[]        @relation("AuthorToAnnonce")

  initiatedConversations Conversation[] @relation("Initiator")
  receivedConversations  Conversation[] @relation("Receiver")

  @@map("users")
}

model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeurId String
  professeur   User      @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  eleves       User[]
  messages     Message[]
  annonces     Annonce[]

  @@map("classes")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
  isPunished Boolean @default(false)

  @@map("etats_eleves")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]

  @@map("metiers")
}

model Message {
  id         String   @id @default(cuid())
  message    String
  senderId   String
  senderName String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  createdAt  DateTime @default(now())

  // A message belongs to EITHER a class or a direct conversation
  classeId String?
  classe   Classe? @relation(fields: [classeId], references: [id], onDelete: Cascade)

  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  reactions Reaction[]

  @@map("messages")
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("conversations")
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("reactions")
}

model CoursSession {
  id                        String    @id @default(cuid())
  professeurId              String
  professeur                User      @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  participants              User[]    @relation("ParticipantsToSession")
  createdAt                 DateTime  @default(now())
  endedAt                   DateTime?
  spotlightedParticipantSid String?

  @@map("cours_sessions")
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String
  points      Int
  type        TaskType
  completions TaskCompletion[]

  @@map("tasks")
}

model TaskCompletion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@map("task_completions")
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation("AuthorToAnnonce", fields: [authorId], references: [id])
  classeId  String?
  classe    Classe?  @relation(fields: [classeId], references: [id])
  createdAt DateTime @default(now())
  isPublic  Boolean  @default(false)

  @@map("annonces")
}

// Enums
enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
