// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  role                 Role                   @default(ELEVE)
  points               Int?                   @default(0)
  ambition             String?
  parentPassword       String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classe               Classroom?             @relation("EleveToClasse", fields: [classroomId], references: [id])
  classroomId          String?
  etat                 EtatEleve?
  sessionsEnseignees   CoursSession[]         @relation("ProfesseurToSession")
  classesEnseignees    Classroom[]            @relation("ProfesseurToClasse")
  sessionsParticipees  CoursSession[]         @relation("SessionParticipants")
  announcements        Announcement[]
  reactions            Reaction[]
  messages             Message[]
  progress             StudentProgress[]
  leaderboardEntry     Leaderboard?
  achievements         StudentAchievement[]
  parentFeedbacks      ParentFeedback[]
  directMessagesSent   Conversation[]         @relation("DirectMessageInitiator")
  directMessagesRcvd   Conversation[]         @relation("DirectMessageReceiver")
}

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeur    User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId  String
  eleves        User[]         @relation("EleveToClasse")
  sessions      CoursSession[]
  announcements Announcement[]
  messages      Message[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json // { backgroundColor, textColor, cursor, imageUrl }
  etatsEleves EtatEleve[]
}

model CoursSession {
  id                       String   @id @default(cuid())
  professeur               User     @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]   @relation("SessionParticipants")
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
  spotlightedParticipantId String?
  whiteboardControllerId   String?
  finalRounds              FinalRound[]
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  attachmentUrl String?
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("DirectMessageInitiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("DirectMessageReceiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id                  String         @id @default(cuid())
  message             String
  sender              User           @relation(fields: [senderId], references: [id])
  senderId            String
  senderName          String
  createdAt           DateTime       @default(now())
  reactions           Reaction[]
  classroomId         String?
  classroom           Classroom?     @relation(fields: [classroomId], references: [id])
  conversationId      String?
  conversation        Conversation?  @relation(fields: [conversationId], references: [id])
  isQuestion          Boolean?
  directMessageSenderId String?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}

// --- Système de Gamification ---

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model Task {
  id             String           @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  requiresProof  Boolean          @default(false)
  validationType ValidationType   @default("PROFESSOR")
  isActive       Boolean          @default(true)
  duration       Int? // in minutes, for time-based tasks
  startTime      String? // e.g., "08:00"
  endTime        String? // e.g., "09:00"
  attachmentUrl  String?
  progress       StudentProgress[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  rejectionReason String?
  accuracy        Int? // Pourcentage de réussite pour les tâches évaluées
  recipeName      String?
  parentFeedback  ParentFeedback?

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                 String           @id @default(cuid())
  studentProgress    StudentProgress  @relation(fields: [studentProgressId], references: [id])
  studentProgressId  String           @unique
  student            User             @relation(fields: [studentId], references: [id])
  studentId          String
  taste              Int // Goût
  presentation       Int // Présentation
  autonomy           Int // Autonomie
  comment            String?
  createdAt          DateTime         @default(now())
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id               String               @id @default(cuid())
  name             String
  description      String
  icon             String
  points           Int
  criteria         Json // { type: 'total_tasks', count: 50 } ou { type: 'streak', days: 7 }
  studentAchievers StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id              String                  @id @default(cuid())
  session         CoursSession            @relation(fields: [sessionId], references: [id])
  sessionId       String                  @unique
  participants    FinalRoundParticipant[]
  status          String                  @default("pending") // pending, active, completed
  winnerId        String?
  startedAt       DateTime?
  endedAt         DateTime?
}

model FinalRoundParticipant {
  id              String      @id @default(cuid())
  finalRound      FinalRound  @relation(fields: [finalRoundId], references: [id])
  finalRoundId    String
  studentId       String
  score           Int         @default(0)
  hasAnswered     Boolean     @default(false)
}
