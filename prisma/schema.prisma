// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                   @id @default(cuid())
  name                  String?
  email                 String?                  @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                     @default(ELEVE)
  ambition              String?
  points                Int                      @default(0)
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  parentPassword        String?
  classe                Classroom?               @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  classroomId           String?
  etat                  EtatEleve?
  sessionsParticipees   CoursSession[]           @relation("SessionParticipants")
  sessionsEnseignees    CoursSession[]           @relation("SessionProfesseur")
  messages              Message[]
  reactions             Reaction[]
  conversationsInitiated Conversation[]         @relation("Initiator")
  conversationsReceived Conversation[]         @relation("Receiver")
  annonces              Announcement[]
  progress              StudentProgress[]
  leaderboardEntry      Leaderboard?
  accounts              Account[]
  sessions              Session[]
  classesEnseignees     Classroom[]              @relation("ClassesEnseignees")
  achievements          StudentAchievement[]
  finalRoundParticipations FinalRoundParticipant[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
  metierId   String?
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ClassesEnseignees", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  annonces     Announcement[]
  sessions     CoursSession[]
  messages     Message[]      @relation("ClassroomChat")
}

model Task {
  id            String          @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  duration      Int? // Duration in minutes for continuous tasks
  startTime     String? // Start time for time-based tasks (HH:mm)
  endTime       String? // End time for time-based tasks (HH:mm)
  isActive      Boolean         @default(true)
  prerequisites Json?
  progress      StudentProgress[]
}

model StudentProgress {
  id             String    @id @default(cuid())
  student        User      @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task      @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus @default(IN_PROGRESS)
  completionDate DateTime?
  pointsAwarded  Int?
  startedAt      DateTime? @default(now())
  lastActivityAt DateTime?
  activeSeconds  Int?
  @@unique([studentId, taskId, completionDate])
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String   @unique
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  rank           Int      @default(0)
  updatedAt      DateTime @updatedAt
}

model CoursSession {
  id                       String   @id @default(cuid())
  professeur               User     @relation("SessionProfesseur", fields: [professeurId], references: [id])
  professeurId             String
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  participants             User[]   @relation("SessionParticipants")
  spotlightedParticipantSid String?
  whiteboardControllerId   String?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id             String        @id @default(cuid())
  message        String
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  isQuestion     Boolean?
  createdAt      DateTime      @default(now())
  reactions      Reaction[]
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  classroom      Classroom?    @relation("ClassroomChat", fields: [classroomId], references: [id])
  classroomId    String?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())
  @@unique([userId, messageId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
}

model Achievement {
  id          String               @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id             String                  @id @default(cuid())
  name           String
  startTime      DateTime
  endTime        DateTime
  isActive       Boolean                 @default(false)
  participants   FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String      @id @default(cuid())
  student      User        @relation(fields: [studentId], references: [id])
  studentId    String
  finalRound   FinalRound  @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  score        Int         @default(0)
  joinedAt     DateTime    @default(now())
  @@unique([studentId, finalRoundId])
}


enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  COLLABORATIVE
  CREATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
  FAILED
}
