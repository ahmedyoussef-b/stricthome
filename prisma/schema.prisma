// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String              @id @default(cuid())
  name                  String?
  email                 String?             @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                @default(ELEVE)
  ambition              String?
  points                Int?                @default(0)
  // Relations
  classeId              String?
  classe                Classe?             @relation("Appartient", fields: [classeId], references: [id])
  etat                  EtatEleve?
  sessionsEnseignees    CoursSession[]      @relation("Enseignant")
  sessionsParticipees    CoursSession[]      @relation("Participants")
  classesEnseignees     Classe[]            @relation("Enseigne")
  annonces              Annonce[]
  messages              Message[]
  reactions             Reaction[]
  progress              StudentProgress[]
  leaderboardEntry      Leaderboard?

  @@map("users")
}

model Classe {
  id           String         @id @default(cuid())
  nom          String
  professeurId String         @db.Uuid
  professeur   User           @relation("Enseigne", fields: [professeurId], references: [id])
  eleves       User[]         @relation("Appartient")
  annonces     Annonce[]
  sessions     CoursSession[]
  messages     Message[]

  @@map("classes")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  @@map("etats_eleves")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]

  @@map("metiers")
}

model CoursSession {
  id                        String      @id @default(cuid())
  professeurId              String      @db.Uuid
  professeur                User        @relation("Enseignant", fields: [professeurId], references: [id])
  participants              User[]      @relation("Participants")
  createdAt                 DateTime    @default(now())
  endedAt                   DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId    String?
  classeId                  String?
  classe                    Classe?     @relation(fields: [classeId], references: [id])

  @@map("cours_sessions")
}

model Annonce {
  id         String    @id @default(cuid())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  classeId   String?
  classe     Classe?   @relation(fields: [classeId], references: [id])
  isPublic   Boolean   @default(true)
  
  @@map("annonces")
}

model Conversation {
  id           String    @id @default(cuid())
  initiatorId  String
  initiator    User      @relation("conversationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiverId   String
  receiver     User      @relation("conversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages     Message[]
  createdAt    DateTime  @default(now())

  @@unique([initiatorId, receiverId])
  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  message        String        @db.Text
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id])
  senderName     String
  createdAt      DateTime      @default(now())
  classeId       String?
  classe         Classe?       @relation(fields: [classeId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
  @@map("reactions")
}

// Competition System
model Task {
  id           String         @id @default(cuid())
  title        String
  description  String
  type         TaskType
  points       Int
  difficulty   TaskDifficulty @default(EASY)
  category     TaskCategory   @default(ACADEMIC)
  duration     Int            @default(1) // Duration in days
  prerequisites String[]
  resources    String[]
  progress     StudentProgress[]

  @@map("tasks")
}

model StudentProgress {
  id             String   @id @default(cuid())
  studentId      String
  student        User     @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task     @relation(fields: [taskId], references: [id])
  status         ProgressStatus
  completionDate DateTime?
  submittedProof String?
  pointsAwarded  Int      @default(0)
  verifiedById   String?
  // verifiedBy  User?   @relation("Verifier", fields: [verifiedById], references: [id]) // Future feature

  @@unique([studentId, taskId])
  @@map("student_progress")
}

model Leaderboard {
  id             String  @id @default(cuid())
  studentId      String  @unique
  student        User    @relation(fields: [studentId], references: [id])
  totalPoints    Int     @default(0)
  dailyPoints    Int     @default(0)
  weeklyPoints   Int     @default(0)
  monthlyPoints  Int     @default(0)
  completedTasks Int     @default(0)
  currentStreak  Int     @default(0)
  bestStreak     Int     @default(0)
  rank           Int
  medal          Medal?

  @@map("leaderboards")
}

model CompetitionSettings {
  id               String    @id @default(cuid())
  academicYear     String    @unique
  startDate        DateTime
  endDate          DateTime
  finalRoundDate   DateTime
  pointsMultipliers Json

  @@map("competition_settings")
}


enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum ProgressStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  VERIFIED
  REJECTED
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}

enum Medal {
  GOLD
  SILVER
  BRONZE
}
