// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String                    @id @default(cuid())
  name                   String?
  email                  String?                   @unique
  emailVerified          DateTime?
  image                  String?
  role                   Role                      @default(ELEVE)
  points                 Int                       @default(0)
  ambition               String?
  parentPassword         String?
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  classe                 Classroom?                @relation("ElevesDeClasse", fields: [classroomId], references: [id])
  classroomId            String?
  sessionsParticipees    CoursSession[]            @relation("ParticipantsDeSession")
  messages               Message[]
  reactions              Reaction[]
  announcements          Announcement[]
  etat                   EtatEleve?
  progress               StudentProgress[]
  achievements           StudentAchievement[]
  leaderboardEntry       Leaderboard?
  parentFeedbacks        ParentFeedback[]
  classesEnseignees      Classroom[]               @relation("ProfesseurDeClasse")
  sessionsEnseignees     CoursSession[]            @relation("ProfesseurDeSession")
  finalRoundsParticipant FinalRoundParticipant[]
  initiatedConversations Conversation[]            @relation("initiatedConversations")
  receivedConversations  Conversation[]            @relation("receivedConversations")

  @@index([classroomId])
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ProfesseurDeClasse", fields: [professeurId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  professeurId String
  eleves       User[]         @relation("ElevesDeClasse")
  annonces     Announcement[]
  messages     Message[]
  sessions     CoursSession[]
}

model Task {
  id               String            @id @default(cuid())
  title            String
  description      String
  points           Int
  type             TaskType
  category         TaskCategory
  difficulty       TaskDifficulty
  duration         Int? // in minutes, null for instant tasks
  startTime        String? // HH:mm format for time-based tasks
  endTime          String? // HH:mm format for time-based tasks
  isActive         Boolean           @default(true)
  requiresProof    Boolean           @default(false)
  requiresAccuracy Boolean           @default(false)
  progress         StudentProgress[]
}

model StudentProgress {
  id              String           @id @default(cuid())
  student         User             @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task             @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus   @default(IN_PROGRESS)
  completionDate  DateTime?
  startedAt       DateTime         @default(now())
  lastActivityAt  DateTime?
  activeSeconds   Int?
  pointsAwarded   Int?
  submissionUrl   String?
  accuracy        Int?
  recipeName      String?
  parentFeedback  ParentFeedback[]

  @@index([studentId])
  @@index([taskId])
}

model ParentFeedback {
  id                  String          @id @default(cuid())
  studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId   String          @unique
  student             User            @relation(fields: [studentId], references: [id])
  studentId           String
  taste               Int
  presentation        Int
  autonomy            Int
  comment             String?
  createdAt           DateTime        @default(now())

  @@index([studentId])
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  rank           Int
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  updatedAt      DateTime @updatedAt
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  EtatEleve   EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model CoursSession {
  id                      String   @id @default(cuid())
  professeur              User     @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]   @relation("ParticipantsDeSession")
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  whiteboardControllerId  String?
  spotlightedParticipantSid String?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
  classroomId             String?
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  createdAt     DateTime   @default(now())
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
}

model Message {
  id             String         @id @default(cuid())
  message        String
  sender         User           @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  createdAt      DateTime       @default(now())
  isQuestion     Boolean?
  classroomId    String?
  classroom      Classroom?     @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation?  @relation(fields: [conversationId], references: [id])
  reactions      Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  @@unique([userId, messageId, emoji])
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime?
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  score        Int
}

model Achievement {
  id           String               @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("initiatedConversations", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("receivedConversations", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
}
