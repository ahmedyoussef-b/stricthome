// prisma/schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  role                Role                  @default(ELEVE)
  ambition            String?
  points              Int                   @default(0)
  parentPassword      String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  classe              Classroom?            @relation(fields: [classroomId], references: [id])
  classroomId         String?               @index
  sessionsEnseignees  CoursSession[]        @relation("ProfesseurDeSession")
  sessionsParticipees CoursSession[]        @relation("ParticipantsDeSession")
  messagesEnvoyes     Message[]
  reactions           Reaction[]
  announcements       Announcement[]
  progress            StudentProgress[]
  etat                EtatEleve?
  leaderboardEntry    Leaderboard?
  parentFeedback      ParentFeedback[]
  achievements        StudentAchievement[]
  conversationsAsInitiator Conversation[]    @relation("Initiator")
  conversationsAsReceiver  Conversation[]    @relation("Receiver")
  finalRoundParticipations FinalRoundParticipant[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  sessions     CoursSession[]
  messages     Message[]
  annonces     Announcement[]
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Task {
  id               String            @id @default(cuid())
  title            String
  description      String
  points           Int
  type             TaskType
  category         TaskCategory
  difficulty       TaskDifficulty
  duration         Int? // Duration in minutes for continuous tasks
  startTime        String? // Start time in HH:mm format
  endTime          String? // End time in HH:mm format
  isActive         Boolean           @default(true)
  requiresProof    Boolean           @default(false)
  requiresAccuracy Boolean           @default(false)
  studentProgress  StudentProgress[]
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(IN_PROGRESS)
  completionDate  DateTime?
  pointsAwarded   Int?
  activeSeconds   Int?
  startedAt       DateTime?
  lastActivityAt  DateTime?
  submissionUrl   String?
  accuracy        Int?
  feedback        String?
  recipeName      String?
  parentFeedback  ParentFeedback?
  createdAt       DateTime       @default(now())

  @@unique([studentId, taskId, createdAt])
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  studentProgressId String          @unique
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String   @unique
  rank           Int
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(o)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  updatedAt      DateTime @updatedAt
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
  createdAt     DateTime   @default(now())
}

model Message {
  id             String        @id @default(cuid())
  message        String
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  isQuestion     Boolean?
  createdAt      DateTime      @default(now())
  reactions      Reaction[]
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}

model CoursSession {
  id                       String    @id @default(cuid())
  professeur               User      @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]    @relation("ParticipantsDeSession")
  createdAt                DateTime  @default(now())
  endedAt                  DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId   String?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
}

model Achievement {
  id          String                 @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean                 @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  round        FinalRound @relation(fields: [roundId], references: [id])
  roundId      String
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  score        Int        @default(0)
  joinedAt     DateTime   @default(now())

  @@unique([roundId, studentId])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
}
