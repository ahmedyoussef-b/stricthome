// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  directUrl    = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role                   @default(ELEVE)
  ambition                String?
  points                  Int                    @default(0)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  parentPassword          String?

  // Relations
  classe                  Classroom?             @relation("ClassStudents", fields: [classroomId], references: [id])
  classroomId             String?
  sessionsParticipees     CoursSession[]
  messages                Message[]
  reactions               Reaction[]
  studentProgress         StudentProgress[]
  announcements           Announcement[]
  achievements            StudentAchievement[]
  leaderboardEntry        Leaderboard?
  finalRoundParticipations FinalRoundParticipant[]
  etat                    EtatEleve?
  
  classesEnseignees       Classroom[]            @relation("ClassroomTeacher")
  conversationsInitiated  Conversation[]         @relation("ConversationInitiator")
  conversationsReceived   Conversation[]         @relation("ConversationReceiver")

  @@map("users")
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json      // Contains colors, cursor, etc.
  etatsEleves EtatEleve[]

  @@map("metiers")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?

  @@map("etats_eleves")
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ClassroomTeacher", fields: [professeurId], references: [id], onDelete: NoAction)
  eleves       User[]         @relation("ClassStudents")
  messages     Message[]
  sessions     CoursSession[]
  announcements Announcement[]

  @@map("classrooms")
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model Task {
  id              String         @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  isActive        Boolean        @default(true)
  requiresProof   Boolean        @default(false)
  attachmentUrl   String?
  validationType  ValidationType @default(PROFESSOR)
  
  // For time-based tasks
  startTime       String?        // e.g., "08:00"
  endTime         String?        // e.g., "09:00"

  // For duration-based tasks
  duration        Int?           // in minutes

  studentProgress StudentProgress[]

  @@map("tasks")
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED
  FAILED
}

model StudentProgress {
  id             String         @id @default(cuid())
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId         String
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  submissionUrl  String?        // URL to the proof (e.g., image, document)
  pointsAwarded  Int?
  feedback       ParentFeedback?
  
  // For duration-based tasks
  startedAt      DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?
  
  // For creative tasks like cooking
  recipeName     String?

  accuracy       Int?           // Store accuracy percentage if applicable
  
  @@unique([studentId, taskId, completionDate])
  @@map("student_progress")
}

model ParentFeedback {
  id                  String          @id @default(cuid())
  studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  studentProgressId   String          @unique
  studentId           String
  taste               Int?
  presentation        Int?
  autonomy            Int?
  comment             String?
  createdAt           DateTime        @default(now())

  @@map("parent_feedback")
}


model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@unique([initiatorId, receiverId])
  @@map("conversations")
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  senderId       String
  senderName     String
  isQuestion     Boolean?

  // A message can belong to a classroom OR a conversation
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  reactions      Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("reactions")
}

model CoursSession {
  id                      String   @id @default(cuid())
  professeur              User     @relation(fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  classroomId             String?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
  
  // WebRTC/Whiteboard specific fields
  spotlightedParticipantSid String?
  whiteboardControllerId  String?

  @@map("cours_sessions")
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime   @default(now())
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id], onDelete: Cascade)
  attachmentUrl String?

  @@map("announcements")
}


model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json // { type: 'streak', days: 7 } or { type: 'total_tasks', count: 50 }
  students    StudentAchievement[]

  @@map("achievements")
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
  @@map("student_achievements")
}


model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String   @unique
  rank           Int
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  lastUpdate     DateTime @updatedAt

  @@map("leaderboards")
}

model FinalRound {
    id                  String                  @id @default(cuid())
    name                String
    startTime           DateTime
    endTime             DateTime
    isActive            Boolean                 @default(false)
    participants        FinalRoundParticipant[]
    
    @@map("final_rounds")
}

model FinalRoundParticipant {
    id              String      @id @default(cuid())
    finalRound      FinalRound  @relation(fields: [finalRoundId], references: [id], onDelete: Cascade)
    finalRoundId    String
    student         User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId       String
    score           Int         @default(0)
    
    @@unique([finalRoundId, studentId])
    @@map("final_round_participants")
}
