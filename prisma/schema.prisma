// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  role            Role           @default(ELEVE)
  accounts        Account[]
  sessions        Session[]
  ambition        String?
  points          Int            @default(0)
  parentPassword  String?

  // Relations
  classe        Classroom? @relation(fields: [classroomId], references: [id])
  classroomId   String?

  classesEnseignees   Classroom[]        @relation("ClassroomTeacher")
  sessionsEnseignees  CoursSession[]     @relation("SessionProfessor")
  sessionsParticipees CoursSession[]     @relation("SessionParticipants")
  
  announcements     Announcement[]
  reactions         Reaction[]
  messages          Message[]
  progress          StudentProgress[]
  etat              EtatEleve?
  leaderboardEntry  Leaderboard?
  parentFeedbacks   ParentFeedback[]

  // For direct messages
  initiatedConversations Conversation[] @relation("Initiator")
  receivedConversations  Conversation[] @relation("Receiver")
  
  finalRoundParticipations FinalRoundParticipant[]
  achievements             StudentAchievement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Classroom {
  id            String   @id @default(cuid())
  nom           String
  professeurId  String
  professeur    User     @relation("ClassroomTeacher", fields: [professeurId], references: [id], onDelete: NoAction)
  eleves        User[]
  sessions      CoursSession[]
  announcements Announcement[]
  messages      Message[]
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id          String  @id @default(cuid())
  eleveId     String  @unique
  eleve       User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished  Boolean @default(false)
  metierId    String?
  metier      Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

enum ParticipationStatut {
  ACTIVE
  INACTIVE
  PENDING
}

model CoursSession {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  endedAt      DateTime?
  professeurId String
  professeur   User      @relation("SessionProfessor", fields: [professeurId], references: [id], onDelete: Cascade)
  participants User[]    @relation("SessionParticipants")
  classroomId  String?
  classroom    Classroom? @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  spotlightedParticipantSid String?
  whiteboardControllerId String?
}


enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  COLLABORATIVE
  CREATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VERIFIED
  PENDING_VALIDATION
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model Task {
  id                 String            @id @default(cuid())
  title              String
  description        String
  points             Int
  type               TaskType
  category           TaskCategory
  difficulty         TaskDifficulty
  isActive           Boolean           @default(true)
  requiresProof      Boolean           @default(false)
  requiresAccuracy   Boolean           @default(false)
  validationType     ValidationType    @default(PROFESSOR)
  attachmentUrl      String?
  startTime          String? // format "HH:mm"
  endTime            String? // format "HH:mm"
  duration           Int? // en minutes
  studentProgress    StudentProgress[]
}

model StudentProgress {
  id             String        @id @default(cuid())
  studentId      String
  student        User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  submissionUrl  String?
  pointsAwarded  Int?
  startedAt      DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?
  accuracy       Int?
  feedback       ParentFeedback[]

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                String           @id @default(cuid())
  studentProgressId String           @unique
  studentProgress   StudentProgress  @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  studentId         String
  student           User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime         @default(now())
}


model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  
  initiatorId  String
  receiverId   String
  
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  messages     Message[]
  
  @@unique([initiatorId, receiverId])
}

model Message {
  id             String    @id @default(cuid())
  message        String
  createdAt      DateTime  @default(now())
  
  senderId       String
  sender         User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderName     String

  classroomId    String?
  classroom      Classroom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  reactions      Reaction[]
  isQuestion     Boolean?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime   @default(now())
  authorId      String
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id], onDelete: Cascade)
  attachmentUrl String?
}


model FinalRound {
  id              String                   @id @default(cuid())
  theme           String
  description     String
  startDate       DateTime
  endDate         DateTime
  participants    FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  studentId    String
  student      User     @relation(fields: [studentId], references: [id])
  score        Int      @default(0)

  @@unique([finalRoundId, studentId])
}

model Achievement {
  id           String                 @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id])
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}


model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  rank           Int
  lastUpdated    DateTime @updatedAt
}
