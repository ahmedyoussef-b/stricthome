// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  VALIDATED
  REJECTED
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  role                   Role                    @default(ELEVE)
  ambition               String?
  points                 Int?                    @default(0)
  parentPassword         String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  classe                 Classroom?              @relation("EleveToClasse", fields: [classroomId], references: [id])
  classroomId            String?
  classesEnseignees      Classroom[]             @relation("ProfesseurToClasse")
  sessionsEnseignees     CoursSession[]
  sessionsParticipees    CoursSession[]          @relation("SessionParticipants")
  annonces               Announcement[]
  progress               StudentProgress[]
  leaderboardEntry       Leaderboard?
  sentMessages           Message[]               @relation("MessageSender")
  reactions              Reaction[]
  achievements           StudentAchievement[]
  finalRoundParticipations FinalRoundParticipant[]
  etat                   EtatEleve?
  parentFeedback         ParentFeedback[]
  initiatedConversations Conversation[]          @relation("InitiatorToConversation")
  receivedConversations  Conversation[]          @relation("ReceiverToConversation")
  messages               Message[]
}

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeur    User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId  String
  eleves        User[]         @relation("EleveToClasse")
  sessions      CoursSession[]
  annonces      Announcement[]
  messages      Message[]
}

model CoursSession {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  professeurId             String
  professeur               User     @relation(fields: [professeurId], references: [id])
  participants             User[]   @relation("SessionParticipants")
  classroomId              String?
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  spotlightedParticipantId String?
  whiteboardControllerId   String?
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json
  etats       EtatEleve[]
}

model Task {
  id             String          @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  duration       Int? // in minutes, for active tasks
  startTime      String? // e.g., "08:00"
  endTime        String? // e.g., "19:00"
  isActive       Boolean         @default(true)
  requiresProof  Boolean         @default(false)
  attachmentUrl  String?
  validationType ValidationType  @default(PROFESSOR)
  progress       StudentProgress[]
}

model StudentProgress {
  id              String         @id @default(cuid())
  studentId       String
  student         User           @relation(fields: [studentId], references: [id])
  taskId          String
  task            Task           @relation(fields: [taskId], references: [id])
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  pointsAwarded   Int?
  submissionUrl   String?
  rejectionReason String?
  accuracy        Int?
  recipeName      String?
  feedback        ParentFeedback?

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                String          @id @default(cuid())
  studentProgressId String          @unique
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentId         String
  student           User            @relation(fields: [studentId], references: [id])
  taste             Int
  presentation      Int
  autonomy          Int
  comment           String?
  createdAt         DateTime        @default(now())
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id])
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  rank           Int
  updatedAt      DateTime @updatedAt
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String
  attachmentUrl String?
  createdAt   DateTime  @default(now())
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  classeId    String?
  classe      Classroom? @relation(fields: [classeId], references: [id])
}

model Message {
  id                  String   @id @default(cuid())
  message             String
  createdAt           DateTime @default(now())
  senderId            String
  sender              User     @relation("MessageSender", fields: [senderId], references: [id])
  senderName          String
  classroomId         String?
  classroom           Classroom? @relation(fields: [classroomId], references: [id])
  conversationId      String?
  conversation        Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
  isQuestion          Boolean?
  reactions           Reaction[]
  User                User?    @relation(fields: [userId], references: [id])
  userId              String?
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  initiatorId String
  initiator   User      @relation("InitiatorToConversation", fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation("ReceiverToConversation", fields: [receiverId], references: [id])
  messages    Message[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  criteria    Json
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id])
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  earnedAt      DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id           String                  @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  studentId    String
  student      User       @relation(fields: [studentId], references: [id])
  finalRoundId String
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  score        Int?
  joinedAt     DateTime   @default(now())

  @@unique([studentId, finalRoundId])
}
