// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  role            Role      @default(ELEVE)
  points          Int       @default(0)
  ambition        String?
  parentPassword  String?
  classroomId     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  classe            Classroom?        @relation("ClassStudents", fields: [classroomId], references: [id], onDelete: SetNull)
  classesEnseignees Classroom[]       @relation("ClassroomTeacher")
  etat              EtatEleve?        @relation(fields: [id], references: [eleveId])
  sessionsParticipees CoursSession[]  @relation("SessionParticipants")
  progress          StudentProgress[] @relation("StudentProgress")
  messages          Message[]         @relation("MessageSender")
  reactions         Reaction[]        @relation("ReactionSender")
  announcements     Announcement[]    @relation("AnnouncementAuthor")
  conversationsInitiated Conversation[] @relation("ConversationInitiator")
  conversationsReceived  Conversation[] @relation("ConversationReceiver")
  leaderboardEntry  Leaderboard?      @relation(fields: [id], references: [studentId])
  feedbacks         ParentFeedback[]  @relation("StudentFeedback")
  finalRoundParticipations FinalRoundParticipant[]
}

model Classroom {
  id           String    @id @default(cuid())
  nom          String
  professeurId String
  professeur   User      @relation("ClassroomTeacher", fields: [professeurId], references: [id], onDelete: NoAction)
  eleves       User[]    @relation("ClassStudents")
  sessions     CoursSession[]
  announcements Announcement[] @relation("ClassAnnouncements")
  messages     Message[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

enum Role {
  ELEVE
  PROFESSEUR
  PARENT
  ADMIN
}

model CoursSession {
  id          String   @id @default(cuid())
  professeurId String
  professeur  User     @relation("SessionParticipants", fields: [professeurId], references: [id])
  participants User[]  @relation("SessionParticipants")
  createdAt   DateTime @default(now())
  endedAt     DateTime?
  spotlightedParticipantSid String?
  whiteboardControllerId String?
  classroomId String?
  classroom   Classroom? @relation(fields: [classroomId], references: [id])
}

model Message {
  id             String    @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  createdAt      DateTime  @default(now())
  reactions      Reaction[]
  sender         User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  classroomId    String?
  classroom      Classroom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  isQuestion     Boolean?
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation("ReactionSender", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  authorId      String
  author        User      @relation("AnnouncementAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  classeId      String?
  classe        Classroom? @relation("ClassAnnouncements", fields: [classeId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

model Task {
  id               String         @id @default(cuid())
  title            String
  description      String
  points           Int
  type             TaskType
  category         TaskCategory
  difficulty       TaskDifficulty
  isActive         Boolean        @default(true)
  requiresProof    Boolean        @default(false)
  validationType   ValidationType @default(PROFESSOR)
  attachmentUrl    String?
  startTime        String?        // Format "HH:mm"
  endTime          String?        // Format "HH:mm"
  duration         Int?           // Duration in minutes for continuous tasks
  studentProgress  StudentProgress[]
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  VERIFIED
  REJECTED
}

model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation("StudentProgress", fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  startedAt      DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       ParentFeedback[]
  accuracy       Int?
  recipeName     String?

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                 String          @id @default(cuid())
  studentProgressId  String          @unique
  studentProgress    StudentProgress @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  studentId          String
  student            User            @relation("StudentFeedback", fields: [studentId], references: [id], onDelete: Cascade)
  taste              Int
  presentation       Int
  autonomy           Int
  comment            String?
  createdAt          DateTime        @default(now())
}


model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  totalPoints    Int
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  rank           Int
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  points      Int
  criteria    Json // { type: 'streak', days: 7 } or { type: 'total_tasks', count: 50 }
  students    StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  studentId     String
  student       User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id              String                  @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  participants    FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id              String     @id @default(cuid())
  finalRound      FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId    String
  student         User       @relation(fields: [studentId], references: [id])
  studentId       String
  score           Int        @default(0)
}

// Model for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
