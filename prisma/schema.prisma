// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  role             Role             @default(ELEVE)
  ambition         String?
  points           Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  classe           Classe?          @relation(fields: [classeId], references: [id])
  classeId         String?
  classesEnseignees Classe[]         @relation("ProfesseurToClasse")
  etat             EtatEleve?       @relation(fields: [etatEleveId], references: [id])
  etatEleveId      String?          @unique
  sessionsCrees    CoursSession[]   @relation("ProfesseurToSession")
  sessionsParticipees CoursSession[]   @relation("ParticipantsSession")
  taskCompletions  TaskCompletion[]
  messages         Message[]
  reactions        Reaction[]
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")
  annonces         Annonce[]
}

model EtatEleve {
  id         String   @id @default(cuid())
  isPunished Boolean  @default(false)
  eleve      User?
  metier     Metier?  @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatEleves  EtatEleve[]
}

model Classe {
  id            String         @id @default(cuid())
  nom           String
  professeur    User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId  String
  eleves        User[]
  annonces      Annonce[]
  sessions      CoursSession[]
  messages      Message[]
}

model CoursSession {
  id                       String     @id @default(cuid())
  createdAt                DateTime   @default(now())
  endedAt                  DateTime?
  professeur               User       @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]     @relation("ParticipantsSession")
  spotlightedParticipantSid String?
  whiteboardControllerId   String? // ID of the user (teacher or student) controlling the whiteboard
  classe                   Classe?    @relation(fields: [classeId], references: [id])
  classeId                 String?
}


model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  completions     TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
  completedAt DateTime @default(now())

  @@unique([userId, taskId, completedAt])
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String      @id @default(cuid())
  message        String
  createdAt      DateTime    @default(now())
  sender         User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  senderName     String
  classe         Classe?     @relation(fields: [classeId], references: [id], onDelete: Cascade)
  classeId       String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  reactions      Reaction[]

  @@index([classeId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  @@unique([userId, messageId, emoji])
}

model Annonce {
  id         String   @id @default(cuid())
  title      String
  content    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  classe     Classe?  @relation(fields: [classeId], references: [id])
  classeId   String?
  createdAt  DateTime @default(now())
}


enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
