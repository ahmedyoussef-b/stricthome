// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  role              Role            @default(ELEVE)
  ambition          String?
  points            Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  classeId          String?
  classe            Classe?         @relation("ElevesDansClasse", fields: [classeId], references: [id])
  etat              EtatEleve?
  sessionsParticipees CoursSession[]  @relation("ParticipantsSession")
  classesEnseignees Classe[]        @relation("ProfesseurDeClasse")
  sessionsEnseignees CoursSession[]  @relation("ProfesseurSession") // Ajout de la relation inverse
  annonces          Annonce[]
  messages          Message[]
  reactions         Reaction[]
  taskCompletions   TaskCompletion[]
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")
}

model Classe {
  id           String        @id @default(cuid())
  nom          String
  professeurId String?
  professeur   User?         @relation("ProfesseurDeClasse", fields: [professeurId], references: [id])
  eleves       User[]        @relation("ElevesDansClasse")
  annonces     Annonce[]
  messages     Message[]
  sessions     CoursSession[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json        @default("{}")
  etatsEleve  EtatEleve[]
}

model CoursSession {
  id                      String   @id @default(cuid())
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  professeurId            String
  professeur              User     @relation("ProfesseurSession", fields: [professeurId], references: [id])
  participants            User[]   @relation("ParticipantsSession")
  spotlightedParticipantSid String?
  classe                  Classe?  @relation(fields: [classeId], references: [id])
  classeId                String?
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  classe    Classe?  @relation(fields: [classeId], references: [id])
  classeId  String?
  createdAt DateTime @default(now())
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  classe         Classe?       @relation(fields: [classeId], references: [id])
  classeId       String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  reactions      Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String
}

model Conversation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId  String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId   String
  messages     Message[]

  @@unique([initiatorId, receiverId])
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  taskCompletions TaskCompletion[]
}

model TaskCompletion {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  task        Task     @relation(fields: [taskId], references: [id])
  taskId      String
  completedAt DateTime @default(now())
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}
