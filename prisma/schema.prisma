// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                   @id @default(cuid())
  name                  String?
  email                 String?                  @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                     @default(ELEVE)
  ambition              String?                  @default("Explorer le monde")
  points                Int                      @default(0)
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  classroomId           String?                  @map("classe_id")
  classe                Classroom?               @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  sessionsEnseignees    Classroom[]              @relation("ProfesseurToClasse")
  messages              Message[]                @relation("UserMessages")
  reactions             Reaction[]
  conversationsInitiated Conversation[]         @relation("Initiator")
  conversationsReceived Conversation[]         @relation("Receiver")
  annonces              Announcement[]
  leaderboardEntry      Leaderboard?
  etat                  EtatEleve?
  sessionsParticipees   CoursSession[]           @relation("Participants")
  progress              StudentProgress[]
  achievements          StudentAchievement[]
  finalRoundParticipations FinalRoundParticipant[]
  parentPassword        String?

  @@map("users")
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  eleves       User[]
  annonces     Announcement[]
  messages     Message[]
  sessions     CoursSession[]

  @@map("classes")
}

enum Role {
  ELEVE
  PROFESSEUR
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etatsEleve  EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  duration        Int? // Duration in minutes for continuous tasks
  startTime       String? // e.g., "18:00"
  endTime         String? // e.g., "18:10"
  isActive        Boolean          @default(true)
  prerequisites   Json             @default("[]")
  studentProgress StudentProgress[]
  requiresAccuracy Boolean @default(false)

  @@map("tasks")
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  PERSONAL
  ACADEMIC
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus @default(IN_PROGRESS)
  startedAt      DateTime       @default(now())
  completionDate DateTime?
  lastActivityAt DateTime?
  activeSeconds  Int?
  pointsAwarded  Int?
  accuracy       Int?
  feedback       String?

  @@map("student_progress")
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
  FAILED
}

model Leaderboard {
  id             String @id @default(cuid())
  studentId      String @unique
  student        User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  totalPoints    Int    @default(0)
  dailyPoints    Int    @default(0)
  weeklyPoints   Int    @default(0)
  monthlyPoints  Int    @default(0)
  completedTasks Int    @default(0)
  currentStreak  Int    @default(0)
  bestStreak     Int    @default(0)
  rank           Int
}

model Announcement {
  id          String     @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime   @default(now())
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  classeId    String?
  classe      Classroom? @relation(fields: [classeId], references: [id])
  attachmentUrl String?
}

model Message {
  id             String        @id @default(cuid())
  message        String
  createdAt      DateTime      @default(now())
  senderId       String
  sender         User          @relation("UserMessages", fields: [senderId], references: [id])
  senderName     String
  classroomId    String?
  classroom      Classroom?    @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reactions      Reaction[]
  isQuestion     Boolean?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  initiatorId String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId  String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]

  @@unique([initiatorId, receiverId])
}

model CoursSession {
  id                      String   @id @default(cuid())
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  professeurId            String
  professeur              User     @relation(fields: [professeurId], references: [id])
  participants            User[]   @relation("Participants")
  spotlightedParticipantSid String?
  whiteboardControllerId  String?
  classroomId             String?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
}

model Achievement {
  id           String   @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  unlockedBy   StudentAchievement[]
}

model StudentAchievement {
  id              String      @id @default(cuid())
  studentId       String
  student         User        @relation(fields: [studentId], references: [id])
  achievementId   String
  achievement     Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt      DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
  id           String      @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String      @id @default(cuid())
  finalRoundId String
  finalRound   FinalRound  @relation(fields: [finalRoundId], references: [id])
  studentId    String
  student      User        @relation(fields: [studentId], references: [id])
  score        Int

  @@unique([finalRoundId, studentId])
}
