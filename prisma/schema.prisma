// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}


model User {
  id                    String              @id @default(cuid())
  name                  String?
  email                 String?             @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                @default(ELEVE)
  points                Int                 @default(0)
  ambition              String?
  parentPassword        String?
  sessionsEnseignees    CoursSession[]      @relation("ProfesseurSessions")
  sessionsParticipees   CoursSession[]      @relation("Participants")
  messages              Message[]
  classe                Classroom?          @relation("ElevesInClass", fields: [classroomId], references: [id])
  classroomId           String?
  classesEnseignees     Classroom[]         @relation("TeacherOfClass")
  etat                  EtatEleve?
  leaderboardEntry      Leaderboard?
  progress              StudentProgress[]
  achievements          StudentAchievement[]
  announcements         Announcement[]
  reactions             Reaction[]
  sentConversations     Conversation[]      @relation("Initiator")
  receivedConversations Conversation[]      @relation("Receiver")
  parentFeedback        ParentFeedback[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("TeacherOfClass", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]         @relation("ElevesInClass")
  sessions     CoursSession[]
  messages     Message[]      @relation("ClassMessages")
  annonces     Announcement[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String    @id @default(cuid())
  nom         String    @unique
  description String
  icon        String?
  theme       Json      @default("{\"backgroundColor\": \"from-gray-100 to-gray-200\", \"textColor\": \"text-gray-800\", \"primaryColor\": \"240 5.9% 10%\", \"accentColor\": \"240 4.8% 95.9%\", \"cursor\": \"cursor-default\", \"imageUrl\": \"https://picsum.photos/seed/default/1200/800\"}")
  etats       EtatEleve[]
}

model CoursSession {
  id                      String   @id @default(cuid())
  professeur              User     @relation("ProfesseurSessions", fields: [professeurId], references: [id])
  professeurId            String
  participants            User[]   @relation("Participants")
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  whiteboardControllerId  String?
  spotlightedParticipantSid String?
  classroom               Classroom? @relation(fields: [classroomId], references: [id])
  classroomId             String?
}

model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id             String        @id @default(cuid())
  message        String
  senderId       String
  senderName     String
  sender         User          @relation(fields: [senderId], references: [id])
  classroomId    String?
  classroom      Classroom?    @relation("ClassMessages", fields: [classroomId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references- [id])
  reactions      Reaction[]
  isQuestion     Boolean?
  createdAt      DateTime      @default(now())
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType         @default(DAILY)
  category        TaskCategory     @default(PERSONAL)
  difficulty      TaskDifficulty   @default(EASY)
  isActive        Boolean          @default(true)
  requiresProof   Boolean          @default(false)
  validationType  String           @default("PROFESSOR") // AUTOMATIC, PROFESSOR, PARENT
  startTime       String? // Format 'HH:MM'
  endTime         String? // Format 'HH:MM'
  duration        Int? // Duration in minutes for tasks like 'Marathon de Concentration'
  progress        StudentProgress[]
  attachmentUrl   String?
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(NOT_STARTED)
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  accuracy        Int? // Pourcentage de réussite pour les tâches évaluables
  rejectionReason String?
  parentFeedback  ParentFeedback?
  recipeName      String?
  
  @@unique([studentId, taskId, completionDate]) // Permet plusieurs soumissions pour les tâches récurrentes
}

model ParentFeedback {
  id                  String          @id @default(cuid())
  studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId   String          @unique
  student             User            @relation(fields: [studentId], references: [id])
  studentId           String
  taste               Int // Note sur 100
  presentation        Int // Note sur 100
  autonomy            Int // Note sur 100
  comment             String?
  createdAt           DateTime        @default(now())
}


model Leaderboard {
  id             String @id @default(cuid())
  student        User   @relation(fields: [studentId], references: [id])
  studentId      String @unique
  totalPoints    Int    @default(0)
  dailyPoints    Int    @default(0)
  weeklyPoints   Int    @default(0)
  monthlyPoints  Int    @default(0)
  completedTasks Int    @default(0)
  rank           Int
  currentStreak  Int    @default(0)
  bestStreak     Int    @default(0)
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id           String    @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json // { "type": "streak", "days": 7 } or { "type": "total_tasks", "count": 50 }
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

// Modèle pour le Tournoi Final
model FinalRound {
  id              String                @id @default(cuid())
  name            String                @default("Tournoi des Champions")
  startTime       DateTime
  endTime         DateTime
  isActive        Boolean               @default(false)
  participants    FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id            String      @id @default(cuid())
  round         FinalRound  @relation(fields: [roundId], references: [id])
  roundId       String
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  score         Int         @default(0)
  rank          Int?
  joinedAt      DateTime    @default(now())

  @@unique([roundId, studentId])
}


enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  PERSONAL
  ACADEMIC
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION // En attente de validation (parent ou prof)
  VERIFIED           // Validé par parent/prof
  REJECTED           // Rejeté par parent/prof
}

    