// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ELEVE)
  ambition              String?
  points                Int?                  @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  sessionsParticipees   CoursSession[]        @relation("Participants")
  classesEnseignees     Classe[]
  annonces              Annonce[]
  etat                  EtatEleve?
  classeId              String?
  classe                Classe?               @relation(fields: [classeId], references: [id])
  sentMessages          Message[]             @relation("SentMessages")
  reactions             Reaction[]
  progress              StudentProgress[]
  leaderboard           Leaderboard?
  initiatedConversations Conversation[]     @relation("Initiator")
  receivedConversations  Conversation[]     @relation("Receiver")
  
  accounts              Account[]
  sessions              Session[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model Classe {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  sessions     CoursSession[]
  messages     Message[]
  annonces     Annonce[]
}

model CoursSession {
  id                       String    @id @default(cuid())
  professeur               User      @relation(fields: [professeurId], references: [id])
  professeurId             String
  participants             User[]    @relation("Participants")
  createdAt                DateTime  @default(now())
  endedAt                  DateTime?
  classe                   Classe?   @relation(fields: [classeId], references: [id])
  classeId                 String?
  spotlightedParticipantSid String?
  whiteboardControllerId   String?
}

model Message {
  id             String        @id @default(cuid())
  message        String
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  senderName     String
  createdAt      DateTime      @default(now())
  classe         Classe?       @relation(fields: [classeId], references: [id])
  classeId       String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  reactions      Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
}

model Conversation {
  id           String    @id @default(cuid())
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId  String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId   String
  createdAt    DateTime  @default(now())
  messages     Message[]

  @@unique([initiatorId, receiverId])
}

model Annonce {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  classe    Classe?  @relation(fields: [classeId], references: [id])
  classeId  String?
}

// ---- COMPETITION MODELS ----

model Task {
  id           String          @id @default(cuid())
  title        String
  description  String
  points       Int
  type         TaskType
  difficulty   TaskDifficulty  @default(EASY)
  category     TaskCategory    @default(ACADEMIC)
  duration     Int             @default(1)
  progress     StudentProgress[]
}

model StudentProgress {
  id             String      @id @default(cuid())
  student        User        @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task        @relation(fields: [taskId], references: [id])
  taskId         String
  status         String // pending, in-progress, completed, verified, rejected
  completionDate DateTime?
  submittedProof String?
  pointsAwarded  Int
  verifiedBy     String?
}

model Leaderboard {
  id              String   @id @default(cuid())
  student         User     @relation(fields: [studentId], references: [id])
  studentId       String   @unique
  totalPoints     Int      @default(0)
  dailyPoints     Int      @default(0)
  weeklyPoints    Int      @default(0)
  monthlyPoints   Int      @default(0)
  completedTasks  Int      @default(0)
  currentStreak   Int      @default(0)
  bestStreak      Int      @default(0)
  rank            Int
  medal           String? // gold, silver, bronze
}

model CompetitionSettings {
  id                String   @id @default(cuid())
  academicYear      String
  startDate         DateTime
  endDate           DateTime
  finalRoundDate    DateTime
  pointsMultipliers Json
}

// ---- ENUMS ----

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskCategory {
  ACADEMIC
  CREATIVE
  COLLABORATIVE
  PERSONAL
}

// ---- NextAuth Specific models ----

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}