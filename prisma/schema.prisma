// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String?       @unique
  emailVerified        DateTime?
  image                String?
  role                 Role          @default(ELEVE)
  ambition             String?       @default("explorer le monde")
  points               Int           @default(0)
  parentPassword       String?
  classe               Classroom?    @relation(fields: [classroomId], references: [id])
  classroomId          String?
  sessionsEnseignees   CoursSession[] @relation("ProfesseurDeSession")
  sessionsParticipees  CoursSession[] @relation("ParticipantsDeSession")
  etat                 EtatEleve?
  messages             Message[]
  reactions            Reaction[]
  announcements        Announcement[]
  studentAchievements  StudentAchievement[]
  leaderboardEntry     Leaderboard?
  progress             StudentProgress[]

  @@index([classroomId])
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  annonces     Announcement[]
  sessions     CoursSession[]
  messages     Message[]

  @@index([professeurId])
}

enum Role {
  ELEVE
  PROFESSEUR
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?

  @@index([eleveId])
  @@index([metierId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  eleves      EtatEleve[]
}

model Task {
  id               String           @id @default(cuid())
  title            String
  description      String
  points           Int
  type             TaskType
  category         TaskCategory
  difficulty       TaskDifficulty   @default(EASY)
  requiresProof    Boolean          @default(false)
  requiresAccuracy Boolean          @default(false)
  isActive         Boolean          @default(true)
  duration         Int? // Duration in minutes for continuous tasks
  startTime        String? // HH:mm format for time-based tasks
  endTime          String? // HH:mm format for time-based tasks
  progress         StudentProgress[]
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  FINAL
}

enum TaskCategory {
  PERSONAL
  ACADEMIC
  CREATIVE
  COLLABORATIVE
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  totalPoints    Int      @default(0)
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  updatedAt      DateTime @updatedAt

  @@index([studentId])
}

model StudentProgress {
  id               String          @id @default(cuid())
  student          User            @relation(fields: [studentId], references: [id])
  studentId        String
  task             Task            @relation(fields: [taskId], references: [id])
  taskId           String
  status           ProgressStatus  @default(IN_PROGRESS)
  completionDate   DateTime?
  startedAt        DateTime        @default(now())
  lastActivityAt   DateTime?
  activeSeconds    Int?
  pointsAwarded    Int?
  submissionUrl    String?
  accuracy         Int?
  recipeName       String?
  parentFeedback   ParentFeedback?
  createdAt        DateTime        @default(now())

  @@index([studentId])
  @@index([taskId])
}

model ParentFeedback {
  id                  String          @id @default(cuid())
  studentProgress     StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId   String          @unique
  taste               Int
  presentation        Int
  autonomy            Int
  comment             String?
  createdAt           DateTime        @default(now())
}


enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_VALIDATION
  VERIFIED
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation(fields: [initiatorId], references: [id], name: "InitiatedConversations")
  initiatorId String
  receiver    User      @relation(fields: [receiverId], references: [id], name: "ReceivedConversations")
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())

  @@index([initiatorId])
  @@index([receiverId])
}

model Message {
  id             String       @id @default(cuid())
  message        String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  senderName     String
  isQuestion     Boolean?
  reactions      Reaction[]
  class          Classroom?   @relation(fields: [classroomId], references: [id])
  classroomId    String?
  conversation   Conversation?@relation(fields: [conversationId], references: [id])
  conversationId String?
  createdAt      DateTime     @default(now())

  @@index([senderId])
  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([messageId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())

  @@index([authorId])
  @@index([classeId])
}

model CoursSession {
  id                        String   @id @default(cuid())
  professeur                User     @relation("ProfesseurDeSession", fields: [professeurId], references: [id])
  professeurId              String
  participants              User[]   @relation("ParticipantsDeSession")
  createdAt                 DateTime @default(now())
  endedAt                   DateTime?
  whiteboardControllerId    String? // User ID of the participant controlling the whiteboard
  spotlightedParticipantSid String?
  classroom                 Classroom? @relation(fields: [classroomId], references: [id])
  classroomId               String?

  @@index([professeurId])
}

model Achievement {
  id                  String                 @id @default(cuid())
  name                String
  description         String
  icon                String
  points              Int
  criteria            Json // { "type": "total_tasks", "count": 50 } or { "type": "streak", "days": 7 }
  studentAchievements StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  unlockedAt    DateTime    @default(now())

  @@unique([studentId, achievementId])
}

// Models for final round tournament
model FinalRound {
  id           String                @id @default(cuid())
  name         String
  startTime    DateTime
  endTime      DateTime
  isActive     Boolean               @default(false)
  participants FinalRoundParticipant[]
}

model FinalRoundParticipant {
  id           String     @id @default(cuid())
  finalRound   FinalRound @relation(fields: [finalRoundId], references: [id])
  finalRoundId String
  studentId    String // Not a relation to keep it simple, could be expanded
  score        Int        @default(0)
  joinedAt     DateTime   @default(now())

  @@unique([finalRoundId, studentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
