// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum TaskCategory {
  ACADEMIC
  PERSONAL
  COLLABORATIVE
  CREATIVE
}

enum ProgressStatus {
  NOT_STARTED
  COMPLETED
  VALIDATED
  REJECTED
}

enum ValidationType {
  PARENT
  PROFESSOR
  AUTOMATIC
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String?         @unique
  emailVerified        DateTime?
  image                String?
  role                 Role            @default(ELEVE)
  ambition             String?
  points               Int?            @default(0)
  parentPassword       String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  classe               Classroom?      @relation(fields: [classroomId], references: [id])
  classroomId          String?
  sessionsParticipees  CoursSession[]  @relation("SessionParticipants")
  sessionsEnseignees   CoursSession[]  @relation("ProfesseurToSession")
  classesEnseignees    Classroom[]
  etat                 EtatEleve?
  messages             Message[]       @relation("MessageSender")
  directMessagesSent   Message[]       @relation("DirectMessageSender")
  reactions            Reaction[]
  announcements        Announcement[]
  progress             StudentProgress[]
  achievements         StudentAchievement[]
  leaderboardEntry     Leaderboard?
  initiatedConversations Conversation[] @relation("Initiator")
  receivedConversations  Conversation[] @relation("Receiver")
  parentFeedback       ParentFeedback[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  sessions     CoursSession[]
  annonces     Announcement[]
  messages     Message[]
}

model CoursSession {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  endedAt                  DateTime?
  professeurId             String
  professeur               User     @relation("ProfesseurToSession", fields: [professeurId], references: [id])
  participants             User[]   @relation("SessionParticipants")
  classroom                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId              String?
  spotlightedParticipantId String?
  whiteboardControllerId   String?
}

model Conversation {
  id           String    @id @default(cuid())
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId  String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId   String
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model Message {
  id                    String        @id @default(cuid())
  message               String
  createdAt             DateTime      @default(now())
  sender                User          @relation("MessageSender", fields: [senderId], references: [id])
  senderId              String
  senderName            String
  reactions             Reaction[]
  isQuestion            Boolean?
  
  // For group chat
  classroom             Classroom?    @relation(fields: [classroomId], references: [id])
  classroomId           String?

  // For direct messages
  conversation          Conversation? @relation(fields: [conversationId], references: [id])
  conversationId        String?
  directMessageSender   User?         @relation("DirectMessageSender", fields: [directMessageSenderId], references: [id])
  directMessageSenderId String?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String

  @@unique([userId, messageId, emoji])
}

model Announcement {
  id             String     @id @default(cuid())
  title          String
  content        String
  attachmentUrl  String?
  createdAt      DateTime   @default(now())
  author         User       @relation(fields: [authorId], references: [id])
  authorId       String
  classe         Classroom? @relation(fields: [classeId], references: [id])
  classeId       String?
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json
  eleves      EtatEleve[]
}

model Task {
  id              String         @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  duration        Int?           // Duration in minutes for timed tasks
  isActive        Boolean        @default(true)
  attachmentUrl   String?
  requiresProof   Boolean        @default(false)
  startTime       String?        // e.g., "09:00"
  endTime         String?        // e.g., "17:00"
  validationType  ValidationType @default(PROFESSOR)
  studentProgress StudentProgress[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model StudentProgress {
  id             String          @id @default(cuid())
  student        User            @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task            @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus
  completionDate DateTime?
  pointsAwarded  Int?
  submissionUrl  String?
  accuracy       Int?            // e.g., percentage score for a quiz
  recipeName     String?
  feedback       ParentFeedback?

  @@unique([studentId, taskId, completionDate])
}

model ParentFeedback {
  id                 String          @id @default(cuid())
  studentProgress    StudentProgress @relation(fields: [studentProgressId], references: [id])
  studentProgressId  String          @unique
  student            User            @relation(fields: [studentId], references: [id])
  studentId          String
  taste              Int
  presentation       Int
  autonomy           Int
  comment            String?
  createdAt          DateTime        @default(now())
}


model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  rank           Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Achievement {
  id           String @id @default(cuid())
  name         String
  description  String
  icon         String
  points       Int
  criteria     Json
  students     StudentAchievement[]
}

model StudentAchievement {
  id            String      @id @default(cuid())
  student       User        @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  earnedAt      DateTime    @default(now())

  @@unique([studentId, achievementId])
}

model FinalRound {
    id           String @id @default(cuid())
    name         String
    description  String?
    startTime    DateTime
    endTime      DateTime
    participants FinalRoundParticipant[]
    isFinished   Boolean @default(false)
}

model FinalRoundParticipant {
    id              String @id @default(cuid())
    finalRound      FinalRound @relation(fields: [finalRoundId], references: [id])
    finalRoundId    String
    student         User @relation(fields: [studentId], references: [id])
    studentId       String
    score           Int @default(0)
    joinedAt        DateTime @default(now())

    @@unique([finalRoundId, studentId])
}
